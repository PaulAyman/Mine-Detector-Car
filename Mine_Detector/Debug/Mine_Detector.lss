
Mine_Detector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003538  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00003538  000035cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800078  00800078  000035e4  2**0
                  ALLOC
  3 .stab         00003360  00000000  00000000  000035e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013a3  00000000  00000000  00006944  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a01b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c0a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c220  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__vector_1>
       8:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__vector_2>
       c:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 19 	call	0x3222	; 0x3222 <main>
      8a:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6f 1a 	jmp	0x34de	; 0x34de <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Force_OutputCompare>:
#include "avr/io.h"
#include "avr/delay.h"


void Force_OutputCompare()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
		CLEAR_BIT(TCCR0, FOC0);			//clear bit
		return;
	}
	else
	{
		SET_BIT(TCCR0, FOC0);			//else set a force compare match
     ca6:	a3 e5       	ldi	r26, 0x53	; 83
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e3 e5       	ldi	r30, 0x53	; 83
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
	}
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <TIMER0_Init>:



//TIMER0 Initialization
void TIMER0_Init(u8 timer_Mode, u8 OutputCompareMode, u8 prescalar, u8 OutputCompareValue, u8 IntMode)
{
     cba:	0f 93       	push	r16
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	2f 97       	sbiw	r28, 0x0f	; 15
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	6a 83       	std	Y+2, r22	; 0x02
     cd4:	4b 83       	std	Y+3, r20	; 0x03
     cd6:	2c 83       	std	Y+4, r18	; 0x04
     cd8:	0d 83       	std	Y+5, r16	; 0x05
	switch(timer_Mode){
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	3f 87       	std	Y+15, r19	; 0x0f
     ce2:	2e 87       	std	Y+14, r18	; 0x0e
     ce4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ce6:	9f 85       	ldd	r25, Y+15	; 0x0f
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	91 05       	cpc	r25, r1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <TIMER0_Init+0x36>
     cee:	80 c0       	rjmp	.+256    	; 0xdf0 <TIMER0_Init+0x136>
     cf0:	2e 85       	ldd	r18, Y+14	; 0x0e
     cf2:	3f 85       	ldd	r19, Y+15	; 0x0f
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	2c f4       	brge	.+10     	; 0xd04 <TIMER0_Init+0x4a>
     cfa:	8e 85       	ldd	r24, Y+14	; 0x0e
     cfc:	9f 85       	ldd	r25, Y+15	; 0x0f
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	71 f0       	breq	.+28     	; 0xd1e <TIMER0_Init+0x64>
     d02:	7b c1       	rjmp	.+758    	; 0xffa <TIMER0_Init+0x340>
     d04:	2e 85       	ldd	r18, Y+14	; 0x0e
     d06:	3f 85       	ldd	r19, Y+15	; 0x0f
     d08:	22 30       	cpi	r18, 0x02	; 2
     d0a:	31 05       	cpc	r19, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <TIMER0_Init+0x56>
     d0e:	bf c0       	rjmp	.+382    	; 0xe8e <TIMER0_Init+0x1d4>
     d10:	8e 85       	ldd	r24, Y+14	; 0x0e
     d12:	9f 85       	ldd	r25, Y+15	; 0x0f
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	91 05       	cpc	r25, r1
     d18:	09 f4       	brne	.+2      	; 0xd1c <TIMER0_Init+0x62>
     d1a:	22 c1       	rjmp	.+580    	; 0xf60 <TIMER0_Init+0x2a6>
     d1c:	6e c1       	rjmp	.+732    	; 0xffa <TIMER0_Init+0x340>
	/**********  normalMode  **********/
	case normalMode:
		CLEAR_BIT(TCCR0, WGM00);			// normal mode
     d1e:	a3 e5       	ldi	r26, 0x53	; 83
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e3 e5       	ldi	r30, 0x53	; 83
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8f 7b       	andi	r24, 0xBF	; 191
     d2a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, WGM01);
     d2c:	a3 e5       	ldi	r26, 0x53	; 83
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e3 e5       	ldi	r30, 0x53	; 83
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	87 7f       	andi	r24, 0xF7	; 247
     d38:	8c 93       	st	X, r24

			switch(OutputCompareMode)
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	3d 87       	std	Y+13, r19	; 0x0d
     d42:	2c 87       	std	Y+12, r18	; 0x0c
     d44:	8c 85       	ldd	r24, Y+12	; 0x0c
     d46:	9d 85       	ldd	r25, Y+13	; 0x0d
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	91 05       	cpc	r25, r1
     d4c:	21 f1       	breq	.+72     	; 0xd96 <TIMER0_Init+0xdc>
     d4e:	2c 85       	ldd	r18, Y+12	; 0x0c
     d50:	3d 85       	ldd	r19, Y+13	; 0x0d
     d52:	22 30       	cpi	r18, 0x02	; 2
     d54:	31 05       	cpc	r19, r1
     d56:	2c f4       	brge	.+10     	; 0xd62 <TIMER0_Init+0xa8>
     d58:	8c 85       	ldd	r24, Y+12	; 0x0c
     d5a:	9d 85       	ldd	r25, Y+13	; 0x0d
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	61 f0       	breq	.+24     	; 0xd78 <TIMER0_Init+0xbe>
     d60:	4c c1       	rjmp	.+664    	; 0xffa <TIMER0_Init+0x340>
     d62:	2c 85       	ldd	r18, Y+12	; 0x0c
     d64:	3d 85       	ldd	r19, Y+13	; 0x0d
     d66:	22 30       	cpi	r18, 0x02	; 2
     d68:	31 05       	cpc	r19, r1
     d6a:	21 f1       	breq	.+72     	; 0xdb4 <TIMER0_Init+0xfa>
     d6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     d70:	83 30       	cpi	r24, 0x03	; 3
     d72:	91 05       	cpc	r25, r1
     d74:	71 f1       	breq	.+92     	; 0xdd2 <TIMER0_Init+0x118>
     d76:	41 c1       	rjmp	.+642    	; 0xffa <TIMER0_Init+0x340>
			{
			case normalPort:					// Normal port operation, OC0 disconnected
				CLEAR_BIT(TCCR0, COM00);
     d78:	a3 e5       	ldi	r26, 0x53	; 83
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e3 e5       	ldi	r30, 0x53	; 83
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	8f 7e       	andi	r24, 0xEF	; 239
     d84:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM01);
     d86:	a3 e5       	ldi	r26, 0x53	; 83
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e3 e5       	ldi	r30, 0x53	; 83
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8f 7d       	andi	r24, 0xDF	; 223
     d92:	8c 93       	st	X, r24
     d94:	32 c1       	rjmp	.+612    	; 0xffa <TIMER0_Init+0x340>
				break;

			case toggle_OC0:					// Toggle OC0 on compare match
				SET_BIT(TCCR0, COM00);
     d96:	a3 e5       	ldi	r26, 0x53	; 83
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e3 e5       	ldi	r30, 0x53	; 83
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	80 61       	ori	r24, 0x10	; 16
     da2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM01);
     da4:	a3 e5       	ldi	r26, 0x53	; 83
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e3 e5       	ldi	r30, 0x53	; 83
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	8f 7d       	andi	r24, 0xDF	; 223
     db0:	8c 93       	st	X, r24
     db2:	23 c1       	rjmp	.+582    	; 0xffa <TIMER0_Init+0x340>
				break;

			case clear_OC0:						// Clear OC0 on compare match
				CLEAR_BIT(TCCR0, COM00);
     db4:	a3 e5       	ldi	r26, 0x53	; 83
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e3 e5       	ldi	r30, 0x53	; 83
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8f 7e       	andi	r24, 0xEF	; 239
     dc0:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM01);
     dc2:	a3 e5       	ldi	r26, 0x53	; 83
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e3 e5       	ldi	r30, 0x53	; 83
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	80 62       	ori	r24, 0x20	; 32
     dce:	8c 93       	st	X, r24
     dd0:	14 c1       	rjmp	.+552    	; 0xffa <TIMER0_Init+0x340>
				break;

			case set_OC0:						// Set OC0 on compare match
				SET_BIT(TCCR0, COM00);
     dd2:	a3 e5       	ldi	r26, 0x53	; 83
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e3 e5       	ldi	r30, 0x53	; 83
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	80 61       	ori	r24, 0x10	; 16
     dde:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM01);
     de0:	a3 e5       	ldi	r26, 0x53	; 83
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e3 e5       	ldi	r30, 0x53	; 83
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	80 62       	ori	r24, 0x20	; 32
     dec:	8c 93       	st	X, r24
     dee:	05 c1       	rjmp	.+522    	; 0xffa <TIMER0_Init+0x340>
		break;


	/**********  PWM_PhaseCorrect  **********/
	case PWM_PhaseCorrect:
		SET_BIT(TCCR0, WGM00);				//PWM_PhaseCorrect mode
     df0:	a3 e5       	ldi	r26, 0x53	; 83
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e3 e5       	ldi	r30, 0x53	; 83
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	80 64       	ori	r24, 0x40	; 64
     dfc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, WGM01);
     dfe:	a3 e5       	ldi	r26, 0x53	; 83
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e3 e5       	ldi	r30, 0x53	; 83
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	87 7f       	andi	r24, 0xF7	; 247
     e0a:	8c 93       	st	X, r24

			switch(OutputCompareMode)
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	3b 87       	std	Y+11, r19	; 0x0b
     e14:	2a 87       	std	Y+10, r18	; 0x0a
     e16:	8a 85       	ldd	r24, Y+10	; 0x0a
     e18:	9b 85       	ldd	r25, Y+11	; 0x0b
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	91 05       	cpc	r25, r1
     e1e:	c9 f0       	breq	.+50     	; 0xe52 <TIMER0_Init+0x198>
     e20:	2a 85       	ldd	r18, Y+10	; 0x0a
     e22:	3b 85       	ldd	r19, Y+11	; 0x0b
     e24:	23 30       	cpi	r18, 0x03	; 3
     e26:	31 05       	cpc	r19, r1
     e28:	19 f1       	breq	.+70     	; 0xe70 <TIMER0_Init+0x1b6>
     e2a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e2c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	09 f0       	breq	.+2      	; 0xe34 <TIMER0_Init+0x17a>
     e32:	e3 c0       	rjmp	.+454    	; 0xffa <TIMER0_Init+0x340>
			{
			case normalPort:					// Normal port operation, OC0 disconnected
				CLEAR_BIT(TCCR0, COM00);
     e34:	a3 e5       	ldi	r26, 0x53	; 83
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e3 e5       	ldi	r30, 0x53	; 83
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	8f 7e       	andi	r24, 0xEF	; 239
     e40:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM01);
     e42:	a3 e5       	ldi	r26, 0x53	; 83
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e3 e5       	ldi	r30, 0x53	; 83
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 7d       	andi	r24, 0xDF	; 223
     e4e:	8c 93       	st	X, r24
     e50:	d4 c0       	rjmp	.+424    	; 0xffa <TIMER0_Init+0x340>
//				SET_BIT(TCCR0, COM00);
//				CLEAR_BIT(TCCR0, COM01);
//				break;

			case clear_OC0:						// Clear OC0 on compare match, Set OC0 on compare-
				CLEAR_BIT(TCCR0, COM00);		//-match when downcounting
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7e       	andi	r24, 0xEF	; 239
     e5e:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM01);
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 62       	ori	r24, 0x20	; 32
     e6c:	8c 93       	st	X, r24
     e6e:	c5 c0       	rjmp	.+394    	; 0xffa <TIMER0_Init+0x340>
				break;

			case set_OC0:						// Set OC0 on compare match when up-counting. Clear OC0 on compare-
				SET_BIT(TCCR0, COM00);			//-match when downcounting
     e70:	a3 e5       	ldi	r26, 0x53	; 83
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e3 e5       	ldi	r30, 0x53	; 83
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	80 61       	ori	r24, 0x10	; 16
     e7c:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM01);
     e7e:	a3 e5       	ldi	r26, 0x53	; 83
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e3 e5       	ldi	r30, 0x53	; 83
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 62       	ori	r24, 0x20	; 32
     e8a:	8c 93       	st	X, r24
     e8c:	b6 c0       	rjmp	.+364    	; 0xffa <TIMER0_Init+0x340>
		break;


	/************   CTC   ************/
	case CTC:
		CLEAR_BIT(TCCR0, WGM00);				//CTC mode
     e8e:	a3 e5       	ldi	r26, 0x53	; 83
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e3 e5       	ldi	r30, 0x53	; 83
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8f 7b       	andi	r24, 0xBF	; 191
     e9a:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
     e9c:	a3 e5       	ldi	r26, 0x53	; 83
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e3 e5       	ldi	r30, 0x53	; 83
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	88 60       	ori	r24, 0x08	; 8
     ea8:	8c 93       	st	X, r24

			switch(OutputCompareMode)
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	39 87       	std	Y+9, r19	; 0x09
     eb2:	28 87       	std	Y+8, r18	; 0x08
     eb4:	88 85       	ldd	r24, Y+8	; 0x08
     eb6:	99 85       	ldd	r25, Y+9	; 0x09
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	91 05       	cpc	r25, r1
     ebc:	21 f1       	breq	.+72     	; 0xf06 <TIMER0_Init+0x24c>
     ebe:	28 85       	ldd	r18, Y+8	; 0x08
     ec0:	39 85       	ldd	r19, Y+9	; 0x09
     ec2:	22 30       	cpi	r18, 0x02	; 2
     ec4:	31 05       	cpc	r19, r1
     ec6:	2c f4       	brge	.+10     	; 0xed2 <TIMER0_Init+0x218>
     ec8:	88 85       	ldd	r24, Y+8	; 0x08
     eca:	99 85       	ldd	r25, Y+9	; 0x09
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	61 f0       	breq	.+24     	; 0xee8 <TIMER0_Init+0x22e>
     ed0:	94 c0       	rjmp	.+296    	; 0xffa <TIMER0_Init+0x340>
     ed2:	28 85       	ldd	r18, Y+8	; 0x08
     ed4:	39 85       	ldd	r19, Y+9	; 0x09
     ed6:	22 30       	cpi	r18, 0x02	; 2
     ed8:	31 05       	cpc	r19, r1
     eda:	21 f1       	breq	.+72     	; 0xf24 <TIMER0_Init+0x26a>
     edc:	88 85       	ldd	r24, Y+8	; 0x08
     ede:	99 85       	ldd	r25, Y+9	; 0x09
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	91 05       	cpc	r25, r1
     ee4:	71 f1       	breq	.+92     	; 0xf42 <TIMER0_Init+0x288>
     ee6:	89 c0       	rjmp	.+274    	; 0xffa <TIMER0_Init+0x340>
			{
			case normalPort:					// Normal port operation, OC0 disconnected
				CLEAR_BIT(TCCR0, COM00);
     ee8:	a3 e5       	ldi	r26, 0x53	; 83
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e3 e5       	ldi	r30, 0x53	; 83
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	8f 7e       	andi	r24, 0xEF	; 239
     ef4:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM01);
     ef6:	a3 e5       	ldi	r26, 0x53	; 83
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e3 e5       	ldi	r30, 0x53	; 83
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8f 7d       	andi	r24, 0xDF	; 223
     f02:	8c 93       	st	X, r24
     f04:	7a c0       	rjmp	.+244    	; 0xffa <TIMER0_Init+0x340>
				break;

			case toggle_OC0:					// Toggle OC0 on compare match
				SET_BIT(TCCR0, COM00);
     f06:	a3 e5       	ldi	r26, 0x53	; 83
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e3 e5       	ldi	r30, 0x53	; 83
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 61       	ori	r24, 0x10	; 16
     f12:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM01);
     f14:	a3 e5       	ldi	r26, 0x53	; 83
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e3 e5       	ldi	r30, 0x53	; 83
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	8c 93       	st	X, r24
     f22:	6b c0       	rjmp	.+214    	; 0xffa <TIMER0_Init+0x340>
				break;

			case clear_OC0:						// Clear OC0 on compare match
				CLEAR_BIT(TCCR0, COM00);
     f24:	a3 e5       	ldi	r26, 0x53	; 83
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e3 e5       	ldi	r30, 0x53	; 83
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 7e       	andi	r24, 0xEF	; 239
     f30:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM01);
     f32:	a3 e5       	ldi	r26, 0x53	; 83
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e3 e5       	ldi	r30, 0x53	; 83
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 62       	ori	r24, 0x20	; 32
     f3e:	8c 93       	st	X, r24
     f40:	5c c0       	rjmp	.+184    	; 0xffa <TIMER0_Init+0x340>
				break;

			case set_OC0:						// Set OC0 on compare match
				SET_BIT(TCCR0, COM00);
     f42:	a3 e5       	ldi	r26, 0x53	; 83
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e3 e5       	ldi	r30, 0x53	; 83
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 61       	ori	r24, 0x10	; 16
     f4e:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM01);
     f50:	a3 e5       	ldi	r26, 0x53	; 83
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e3 e5       	ldi	r30, 0x53	; 83
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 62       	ori	r24, 0x20	; 32
     f5c:	8c 93       	st	X, r24
     f5e:	4d c0       	rjmp	.+154    	; 0xffa <TIMER0_Init+0x340>
		break;


	/***********  fast_PWM  ***********/
	case fast_PWM:
		SET_BIT(TCCR0, WGM00);				//fast_PWM mode
     f60:	a3 e5       	ldi	r26, 0x53	; 83
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e3 e5       	ldi	r30, 0x53	; 83
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 64       	ori	r24, 0x40	; 64
     f6c:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
     f6e:	a3 e5       	ldi	r26, 0x53	; 83
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e3 e5       	ldi	r30, 0x53	; 83
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	88 60       	ori	r24, 0x08	; 8
     f7a:	8c 93       	st	X, r24

			switch(OutputCompareMode)
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	3f 83       	std	Y+7, r19	; 0x07
     f84:	2e 83       	std	Y+6, r18	; 0x06
     f86:	8e 81       	ldd	r24, Y+6	; 0x06
     f88:	9f 81       	ldd	r25, Y+7	; 0x07
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	91 05       	cpc	r25, r1
     f8e:	c1 f0       	breq	.+48     	; 0xfc0 <TIMER0_Init+0x306>
     f90:	2e 81       	ldd	r18, Y+6	; 0x06
     f92:	3f 81       	ldd	r19, Y+7	; 0x07
     f94:	23 30       	cpi	r18, 0x03	; 3
     f96:	31 05       	cpc	r19, r1
     f98:	11 f1       	breq	.+68     	; 0xfde <TIMER0_Init+0x324>
     f9a:	8e 81       	ldd	r24, Y+6	; 0x06
     f9c:	9f 81       	ldd	r25, Y+7	; 0x07
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	61 f5       	brne	.+88     	; 0xffa <TIMER0_Init+0x340>
			{
			case normalPort:					// Normal port operation, OC0 disconnected
				CLEAR_BIT(TCCR0, COM00);
     fa2:	a3 e5       	ldi	r26, 0x53	; 83
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e3 e5       	ldi	r30, 0x53	; 83
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8f 7e       	andi	r24, 0xEF	; 239
     fae:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0, COM01);
     fb0:	a3 e5       	ldi	r26, 0x53	; 83
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e3 e5       	ldi	r30, 0x53	; 83
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 7d       	andi	r24, 0xDF	; 223
     fbc:	8c 93       	st	X, r24
     fbe:	1d c0       	rjmp	.+58     	; 0xffa <TIMER0_Init+0x340>
//				SET_BIT(TCCR0, COM00);
//				CLEAR_BIT(TCCR0, COM01);
//				break;

			case clear_OC0:						// Clear OC0 on compare match, set OC0 at TOP
				CLEAR_BIT(TCCR0, COM00);
     fc0:	a3 e5       	ldi	r26, 0x53	; 83
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e3 e5       	ldi	r30, 0x53	; 83
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8f 7e       	andi	r24, 0xEF	; 239
     fcc:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM01);
     fce:	a3 e5       	ldi	r26, 0x53	; 83
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e3 e5       	ldi	r30, 0x53	; 83
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 62       	ori	r24, 0x20	; 32
     fda:	8c 93       	st	X, r24
     fdc:	0e c0       	rjmp	.+28     	; 0xffa <TIMER0_Init+0x340>
				break;

			case set_OC0:						// Set OC0 on compare match, clear OC0 at TOP
				SET_BIT(TCCR0, COM00);
     fde:	a3 e5       	ldi	r26, 0x53	; 83
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e3 e5       	ldi	r30, 0x53	; 83
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	80 61       	ori	r24, 0x10	; 16
     fea:	8c 93       	st	X, r24
				SET_BIT(TCCR0, COM01);
     fec:	a3 e5       	ldi	r26, 0x53	; 83
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e3 e5       	ldi	r30, 0x53	; 83
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 62       	ori	r24, 0x20	; 32
     ff8:	8c 93       	st	X, r24
		break;

	default: break;
	}

	Prescalar_Value(prescalar);
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	0e 94 10 08 	call	0x1020	; 0x1020 <Prescalar_Value>

	OC_ValueInit(OutputCompareValue);
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	0e 94 05 09 	call	0x120a	; 0x120a <OC_ValueInit>

	Timer_IntEnable(IntMode);
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	0e 94 13 09 	call	0x1226	; 0x1226 <Timer_IntEnable>

}
    100c:	2f 96       	adiw	r28, 0x0f	; 15
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	0f 91       	pop	r16
    101e:	08 95       	ret

00001020 <Prescalar_Value>:



void Prescalar_Value(u8 prescalar)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	00 d0       	rcall	.+0      	; 0x1026 <Prescalar_Value+0x6>
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	89 83       	std	Y+1, r24	; 0x01
	switch(prescalar)
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3b 83       	std	Y+3, r19	; 0x03
    1036:	2a 83       	std	Y+2, r18	; 0x02
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	9b 81       	ldd	r25, Y+3	; 0x03
    103c:	83 30       	cpi	r24, 0x03	; 3
    103e:	91 05       	cpc	r25, r1
    1040:	09 f4       	brne	.+2      	; 0x1044 <Prescalar_Value+0x24>
    1042:	70 c0       	rjmp	.+224    	; 0x1124 <Prescalar_Value+0x104>
    1044:	2a 81       	ldd	r18, Y+2	; 0x02
    1046:	3b 81       	ldd	r19, Y+3	; 0x03
    1048:	24 30       	cpi	r18, 0x04	; 4
    104a:	31 05       	cpc	r19, r1
    104c:	84 f4       	brge	.+32     	; 0x106e <Prescalar_Value+0x4e>
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	91 05       	cpc	r25, r1
    1056:	d1 f1       	breq	.+116    	; 0x10cc <Prescalar_Value+0xac>
    1058:	2a 81       	ldd	r18, Y+2	; 0x02
    105a:	3b 81       	ldd	r19, Y+3	; 0x03
    105c:	22 30       	cpi	r18, 0x02	; 2
    105e:	31 05       	cpc	r19, r1
    1060:	0c f0       	brlt	.+2      	; 0x1064 <Prescalar_Value+0x44>
    1062:	4a c0       	rjmp	.+148    	; 0x10f8 <Prescalar_Value+0xd8>
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	d1 f0       	breq	.+52     	; 0x10a0 <Prescalar_Value+0x80>
    106c:	c8 c0       	rjmp	.+400    	; 0x11fe <Prescalar_Value+0x1de>
    106e:	2a 81       	ldd	r18, Y+2	; 0x02
    1070:	3b 81       	ldd	r19, Y+3	; 0x03
    1072:	25 30       	cpi	r18, 0x05	; 5
    1074:	31 05       	cpc	r19, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <Prescalar_Value+0x5a>
    1078:	81 c0       	rjmp	.+258    	; 0x117c <Prescalar_Value+0x15c>
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	9b 81       	ldd	r25, Y+3	; 0x03
    107e:	85 30       	cpi	r24, 0x05	; 5
    1080:	91 05       	cpc	r25, r1
    1082:	0c f4       	brge	.+2      	; 0x1086 <Prescalar_Value+0x66>
    1084:	65 c0       	rjmp	.+202    	; 0x1150 <Prescalar_Value+0x130>
    1086:	2a 81       	ldd	r18, Y+2	; 0x02
    1088:	3b 81       	ldd	r19, Y+3	; 0x03
    108a:	26 30       	cpi	r18, 0x06	; 6
    108c:	31 05       	cpc	r19, r1
    108e:	09 f4       	brne	.+2      	; 0x1092 <Prescalar_Value+0x72>
    1090:	8b c0       	rjmp	.+278    	; 0x11a8 <Prescalar_Value+0x188>
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	9b 81       	ldd	r25, Y+3	; 0x03
    1096:	87 30       	cpi	r24, 0x07	; 7
    1098:	91 05       	cpc	r25, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <Prescalar_Value+0x7e>
    109c:	9b c0       	rjmp	.+310    	; 0x11d4 <Prescalar_Value+0x1b4>
    109e:	af c0       	rjmp	.+350    	; 0x11fe <Prescalar_Value+0x1de>
		{
		case NoClock:
			CLEAR_BIT(TCCR0, CS00);
    10a0:	a3 e5       	ldi	r26, 0x53	; 83
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e3 e5       	ldi	r30, 0x53	; 83
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8e 7f       	andi	r24, 0xFE	; 254
    10ac:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, CS01);
    10ae:	a3 e5       	ldi	r26, 0x53	; 83
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e3 e5       	ldi	r30, 0x53	; 83
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8d 7f       	andi	r24, 0xFD	; 253
    10ba:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, CS02);
    10bc:	a3 e5       	ldi	r26, 0x53	; 83
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e3 e5       	ldi	r30, 0x53	; 83
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8b 7f       	andi	r24, 0xFB	; 251
    10c8:	8c 93       	st	X, r24
    10ca:	99 c0       	rjmp	.+306    	; 0x11fe <Prescalar_Value+0x1de>
			break;

		case Prescalar_0:
			SET_BIT(TCCR0, CS00);
    10cc:	a3 e5       	ldi	r26, 0x53	; 83
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e3 e5       	ldi	r30, 0x53	; 83
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	81 60       	ori	r24, 0x01	; 1
    10d8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, CS01);
    10da:	a3 e5       	ldi	r26, 0x53	; 83
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e3 e5       	ldi	r30, 0x53	; 83
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8d 7f       	andi	r24, 0xFD	; 253
    10e6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, CS02);
    10e8:	a3 e5       	ldi	r26, 0x53	; 83
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e3 e5       	ldi	r30, 0x53	; 83
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8b 7f       	andi	r24, 0xFB	; 251
    10f4:	8c 93       	st	X, r24
    10f6:	83 c0       	rjmp	.+262    	; 0x11fe <Prescalar_Value+0x1de>
			break;

		case Prescalar_8:
			CLEAR_BIT(TCCR0, CS00);
    10f8:	a3 e5       	ldi	r26, 0x53	; 83
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e3 e5       	ldi	r30, 0x53	; 83
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	8e 7f       	andi	r24, 0xFE	; 254
    1104:	8c 93       	st	X, r24
			SET_BIT(TCCR0, CS01);
    1106:	a3 e5       	ldi	r26, 0x53	; 83
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e3 e5       	ldi	r30, 0x53	; 83
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	82 60       	ori	r24, 0x02	; 2
    1112:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, CS02);
    1114:	a3 e5       	ldi	r26, 0x53	; 83
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e3 e5       	ldi	r30, 0x53	; 83
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8b 7f       	andi	r24, 0xFB	; 251
    1120:	8c 93       	st	X, r24
    1122:	6d c0       	rjmp	.+218    	; 0x11fe <Prescalar_Value+0x1de>
			break;

		case Prescalar_64:
			SET_BIT(TCCR0, CS00);
    1124:	a3 e5       	ldi	r26, 0x53	; 83
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e3 e5       	ldi	r30, 0x53	; 83
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	81 60       	ori	r24, 0x01	; 1
    1130:	8c 93       	st	X, r24
			SET_BIT(TCCR0, CS01);
    1132:	a3 e5       	ldi	r26, 0x53	; 83
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e3 e5       	ldi	r30, 0x53	; 83
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	82 60       	ori	r24, 0x02	; 2
    113e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, CS02);
    1140:	a3 e5       	ldi	r26, 0x53	; 83
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e3 e5       	ldi	r30, 0x53	; 83
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	8b 7f       	andi	r24, 0xFB	; 251
    114c:	8c 93       	st	X, r24
    114e:	57 c0       	rjmp	.+174    	; 0x11fe <Prescalar_Value+0x1de>
			break;

		case Prescalar_256:
			CLEAR_BIT(TCCR0, CS00);
    1150:	a3 e5       	ldi	r26, 0x53	; 83
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e3 e5       	ldi	r30, 0x53	; 83
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8e 7f       	andi	r24, 0xFE	; 254
    115c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, CS01);
    115e:	a3 e5       	ldi	r26, 0x53	; 83
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e3 e5       	ldi	r30, 0x53	; 83
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	8d 7f       	andi	r24, 0xFD	; 253
    116a:	8c 93       	st	X, r24
			SET_BIT(TCCR0, CS02);
    116c:	a3 e5       	ldi	r26, 0x53	; 83
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e3 e5       	ldi	r30, 0x53	; 83
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	84 60       	ori	r24, 0x04	; 4
    1178:	8c 93       	st	X, r24
    117a:	41 c0       	rjmp	.+130    	; 0x11fe <Prescalar_Value+0x1de>
			break;

		case Prescalar_1024:
			SET_BIT(TCCR0, CS00);
    117c:	a3 e5       	ldi	r26, 0x53	; 83
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e3 e5       	ldi	r30, 0x53	; 83
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	81 60       	ori	r24, 0x01	; 1
    1188:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0, CS01);
    118a:	a3 e5       	ldi	r26, 0x53	; 83
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e3 e5       	ldi	r30, 0x53	; 83
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	8d 7f       	andi	r24, 0xFD	; 253
    1196:	8c 93       	st	X, r24
			SET_BIT(TCCR0, CS02);
    1198:	a3 e5       	ldi	r26, 0x53	; 83
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e3 e5       	ldi	r30, 0x53	; 83
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	84 60       	ori	r24, 0x04	; 4
    11a4:	8c 93       	st	X, r24
    11a6:	2b c0       	rjmp	.+86     	; 0x11fe <Prescalar_Value+0x1de>
			break;

		case extclk_FallingEdge:
			CLEAR_BIT(TCCR0, CS00);
    11a8:	a3 e5       	ldi	r26, 0x53	; 83
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e3 e5       	ldi	r30, 0x53	; 83
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8e 7f       	andi	r24, 0xFE	; 254
    11b4:	8c 93       	st	X, r24
			SET_BIT(TCCR0, CS01);
    11b6:	a3 e5       	ldi	r26, 0x53	; 83
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e3 e5       	ldi	r30, 0x53	; 83
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	82 60       	ori	r24, 0x02	; 2
    11c2:	8c 93       	st	X, r24
			SET_BIT(TCCR0, CS02);
    11c4:	a3 e5       	ldi	r26, 0x53	; 83
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e3 e5       	ldi	r30, 0x53	; 83
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	84 60       	ori	r24, 0x04	; 4
    11d0:	8c 93       	st	X, r24
    11d2:	15 c0       	rjmp	.+42     	; 0x11fe <Prescalar_Value+0x1de>
			break;

		case extclk_risingEdge:
			SET_BIT(TCCR0, CS00);
    11d4:	a3 e5       	ldi	r26, 0x53	; 83
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e3 e5       	ldi	r30, 0x53	; 83
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	81 60       	ori	r24, 0x01	; 1
    11e0:	8c 93       	st	X, r24
			SET_BIT(TCCR0, CS01);
    11e2:	a3 e5       	ldi	r26, 0x53	; 83
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e3 e5       	ldi	r30, 0x53	; 83
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	82 60       	ori	r24, 0x02	; 2
    11ee:	8c 93       	st	X, r24
			SET_BIT(TCCR0, CS02);
    11f0:	a3 e5       	ldi	r26, 0x53	; 83
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e3 e5       	ldi	r30, 0x53	; 83
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	84 60       	ori	r24, 0x04	; 4
    11fc:	8c 93       	st	X, r24
			break;

		default: break;
		}
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <OC_ValueInit>:



void OC_ValueInit(u8 value)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	89 83       	std	Y+1, r24	; 0x01
	{
		return;
	}
	else
	{
	OCR0 = value;
    1216:	ec e5       	ldi	r30, 0x5C	; 92
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	80 83       	st	Z, r24
	}
}
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <Timer_IntEnable>:



void Timer_IntEnable(u8 mode)
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	00 d0       	rcall	.+0      	; 0x122c <Timer_IntEnable+0x6>
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3b 83       	std	Y+3, r19	; 0x03
    123c:	2a 83       	std	Y+2, r18	; 0x02
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	9b 81       	ldd	r25, Y+3	; 0x03
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	31 f0       	breq	.+12     	; 0x1252 <Timer_IntEnable+0x2c>
    1246:	2a 81       	ldd	r18, Y+2	; 0x02
    1248:	3b 81       	ldd	r19, Y+3	; 0x03
    124a:	21 30       	cpi	r18, 0x01	; 1
    124c:	31 05       	cpc	r19, r1
    124e:	81 f0       	breq	.+32     	; 0x1270 <Timer_IntEnable+0x4a>
    1250:	1d c0       	rjmp	.+58     	; 0x128c <Timer_IntEnable+0x66>
	{
	case compareMatch:
		SET_BIT(TIMSK, OCIE0);
    1252:	a9 e5       	ldi	r26, 0x59	; 89
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e9 e5       	ldi	r30, 0x59	; 89
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	82 60       	ori	r24, 0x02	; 2
    125e:	8c 93       	st	X, r24
		CLEAR_BIT(TIMSK, TOIE0);
    1260:	a9 e5       	ldi	r26, 0x59	; 89
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e9 e5       	ldi	r30, 0x59	; 89
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	8e 7f       	andi	r24, 0xFE	; 254
    126c:	8c 93       	st	X, r24
    126e:	0e c0       	rjmp	.+28     	; 0x128c <Timer_IntEnable+0x66>
		break;

	case overflow:
		CLEAR_BIT(TIMSK, OCIE0);
    1270:	a9 e5       	ldi	r26, 0x59	; 89
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e9 e5       	ldi	r30, 0x59	; 89
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	8d 7f       	andi	r24, 0xFD	; 253
    127c:	8c 93       	st	X, r24
		SET_BIT(TIMSK, TOIE0);
    127e:	a9 e5       	ldi	r26, 0x59	; 89
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e9 e5       	ldi	r30, 0x59	; 89
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	81 60       	ori	r24, 0x01	; 1
    128a:	8c 93       	st	X, r24
		break;

	default: break;
	}
}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <__vector_1>:
static volatile void (*G_Ptr_To_Func_INT2)(void)=NULL;

//Alternative to ISR for INIT0
void __vector_1(void)__attribute__((signal));
void __vector_1(void)
{
    1298:	1f 92       	push	r1
    129a:	0f 92       	push	r0
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	0f 92       	push	r0
    12a0:	11 24       	eor	r1, r1
    12a2:	2f 93       	push	r18
    12a4:	3f 93       	push	r19
    12a6:	4f 93       	push	r20
    12a8:	5f 93       	push	r21
    12aa:	6f 93       	push	r22
    12ac:	7f 93       	push	r23
    12ae:	8f 93       	push	r24
    12b0:	9f 93       	push	r25
    12b2:	af 93       	push	r26
    12b4:	bf 93       	push	r27
    12b6:	ef 93       	push	r30
    12b8:	ff 93       	push	r31
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
	G_Ptr_To_Func_INT0();
    12c2:	e0 91 78 00 	lds	r30, 0x0078
    12c6:	f0 91 79 00 	lds	r31, 0x0079
    12ca:	09 95       	icall
}
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	ff 91       	pop	r31
    12d2:	ef 91       	pop	r30
    12d4:	bf 91       	pop	r27
    12d6:	af 91       	pop	r26
    12d8:	9f 91       	pop	r25
    12da:	8f 91       	pop	r24
    12dc:	7f 91       	pop	r23
    12de:	6f 91       	pop	r22
    12e0:	5f 91       	pop	r21
    12e2:	4f 91       	pop	r20
    12e4:	3f 91       	pop	r19
    12e6:	2f 91       	pop	r18
    12e8:	0f 90       	pop	r0
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	0f 90       	pop	r0
    12ee:	1f 90       	pop	r1
    12f0:	18 95       	reti

000012f2 <__vector_2>:

//Alternative to ISR for INIT1
void __vector_2(void)__attribute__((signal));
void __vector_2(void)
{
    12f2:	1f 92       	push	r1
    12f4:	0f 92       	push	r0
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	0f 92       	push	r0
    12fa:	11 24       	eor	r1, r1
    12fc:	2f 93       	push	r18
    12fe:	3f 93       	push	r19
    1300:	4f 93       	push	r20
    1302:	5f 93       	push	r21
    1304:	6f 93       	push	r22
    1306:	7f 93       	push	r23
    1308:	8f 93       	push	r24
    130a:	9f 93       	push	r25
    130c:	af 93       	push	r26
    130e:	bf 93       	push	r27
    1310:	ef 93       	push	r30
    1312:	ff 93       	push	r31
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
	G_Ptr_To_Func_INT1();
    131c:	e0 91 7a 00 	lds	r30, 0x007A
    1320:	f0 91 7b 00 	lds	r31, 0x007B
    1324:	09 95       	icall
}
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	bf 91       	pop	r27
    1330:	af 91       	pop	r26
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	7f 91       	pop	r23
    1338:	6f 91       	pop	r22
    133a:	5f 91       	pop	r21
    133c:	4f 91       	pop	r20
    133e:	3f 91       	pop	r19
    1340:	2f 91       	pop	r18
    1342:	0f 90       	pop	r0
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	0f 90       	pop	r0
    1348:	1f 90       	pop	r1
    134a:	18 95       	reti

0000134c <__vector_3>:

//Alternative to ISR for INIT2
void __vector_3(void)__attribute__((signal));
void __vector_3(void)
{
    134c:	1f 92       	push	r1
    134e:	0f 92       	push	r0
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	0f 92       	push	r0
    1354:	11 24       	eor	r1, r1
    1356:	2f 93       	push	r18
    1358:	3f 93       	push	r19
    135a:	4f 93       	push	r20
    135c:	5f 93       	push	r21
    135e:	6f 93       	push	r22
    1360:	7f 93       	push	r23
    1362:	8f 93       	push	r24
    1364:	9f 93       	push	r25
    1366:	af 93       	push	r26
    1368:	bf 93       	push	r27
    136a:	ef 93       	push	r30
    136c:	ff 93       	push	r31
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
	G_Ptr_To_Func_INT2();
    1376:	e0 91 7c 00 	lds	r30, 0x007C
    137a:	f0 91 7d 00 	lds	r31, 0x007D
    137e:	09 95       	icall
}
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	ff 91       	pop	r31
    1386:	ef 91       	pop	r30
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	9f 91       	pop	r25
    138e:	8f 91       	pop	r24
    1390:	7f 91       	pop	r23
    1392:	6f 91       	pop	r22
    1394:	5f 91       	pop	r21
    1396:	4f 91       	pop	r20
    1398:	3f 91       	pop	r19
    139a:	2f 91       	pop	r18
    139c:	0f 90       	pop	r0
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	0f 90       	pop	r0
    13a2:	1f 90       	pop	r1
    13a4:	18 95       	reti

000013a6 <SET_CALLBACK>:

//SET_CALLBACK
void SET_CALLBACK(void (*L_Ptr_To_Func)(void), u8 Ex_INT)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <SET_CALLBACK+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <SET_CALLBACK+0x8>
    13ae:	0f 92       	push	r0
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	9a 83       	std	Y+2, r25	; 0x02
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	6b 83       	std	Y+3, r22	; 0x03
	switch(Ex_INT){
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3d 83       	std	Y+5, r19	; 0x05
    13c2:	2c 83       	std	Y+4, r18	; 0x04
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	91 05       	cpc	r25, r1
    13cc:	81 f0       	breq	.+32     	; 0x13ee <SET_CALLBACK+0x48>
    13ce:	2c 81       	ldd	r18, Y+4	; 0x04
    13d0:	3d 81       	ldd	r19, Y+5	; 0x05
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	91 f0       	breq	.+36     	; 0x13fc <SET_CALLBACK+0x56>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	a1 f4       	brne	.+40     	; 0x1408 <SET_CALLBACK+0x62>
	case Ex_INT0:
		G_Ptr_To_Func_INT0=L_Ptr_To_Func;
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	90 93 79 00 	sts	0x0079, r25
    13e8:	80 93 78 00 	sts	0x0078, r24
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <SET_CALLBACK+0x62>
		break;
	case Ex_INT1:
			G_Ptr_To_Func_INT1=L_Ptr_To_Func;
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	90 93 7b 00 	sts	0x007B, r25
    13f6:	80 93 7a 00 	sts	0x007A, r24
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <SET_CALLBACK+0x62>
			break;
	case Ex_INT2:
			G_Ptr_To_Func_INT2=L_Ptr_To_Func;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	90 93 7d 00 	sts	0x007D, r25
    1404:	80 93 7c 00 	sts	0x007C, r24
			break;
}}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <INT0_Enable>:

//INT0 Enable
void INT0_Enable(){
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN_7);//Disable GIE
    1420:	af e5       	ldi	r26, 0x5F	; 95
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ef e5       	ldi	r30, 0x5F	; 95
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	8f 77       	andi	r24, 0x7F	; 127
    142c:	8c 93       	st	X, r24
	CLEAR_BIT(DDRD,INT0); //set PD2 as input
    142e:	a1 e3       	ldi	r26, 0x31	; 49
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e1 e3       	ldi	r30, 0x31	; 49
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8f 7b       	andi	r24, 0xBF	; 191
    143a:	8c 93       	st	X, r24
	SET_BIT(PORTD,INT0); //activate pull up for PD2
    143c:	a2 e3       	ldi	r26, 0x32	; 50
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e2 e3       	ldi	r30, 0x32	; 50
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	80 64       	ori	r24, 0x40	; 64
    1448:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC00); //Any logical change on INT0 generates an interrupt request.
    144a:	a5 e5       	ldi	r26, 0x55	; 85
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e5 e5       	ldi	r30, 0x55	; 85
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	81 60       	ori	r24, 0x01	; 1
    1456:	8c 93       	st	X, r24
	SET_BIT(GICR,INT0); //Enable PIE for INT0
    1458:	ab e5       	ldi	r26, 0x5B	; 91
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	eb e5       	ldi	r30, 0x5B	; 91
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	80 64       	ori	r24, 0x40	; 64
    1464:	8c 93       	st	X, r24
	SET_BIT(SREG,PIN_7);//Enable GIE
    1466:	af e5       	ldi	r26, 0x5F	; 95
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	ef e5       	ldi	r30, 0x5F	; 95
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	80 68       	ori	r24, 0x80	; 128
    1472:	8c 93       	st	X, r24
}
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <INT1_Enable>:

//INT1 Enable
void INT1_Enable(){
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN_7); //disable GIE
    1482:	af e5       	ldi	r26, 0x5F	; 95
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ef e5       	ldi	r30, 0x5F	; 95
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	8f 77       	andi	r24, 0x7F	; 127
    148e:	8c 93       	st	X, r24
	CLEAR_BIT(DDRD,PIN_2); //set PD3 as input
    1490:	a1 e3       	ldi	r26, 0x31	; 49
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e1 e3       	ldi	r30, 0x31	; 49
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8b 7f       	andi	r24, 0xFB	; 251
    149c:	8c 93       	st	X, r24
	SET_BIT(PORTD,PIN_2); //activate pull up for PD3
    149e:	a2 e3       	ldi	r26, 0x32	; 50
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e2 e3       	ldi	r30, 0x32	; 50
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	84 60       	ori	r24, 0x04	; 4
    14aa:	8c 93       	st	X, r24
	SET_BIT(MCUCR,PIN_3); //sense falling edge for INT1
    14ac:	a5 e5       	ldi	r26, 0x55	; 85
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e5       	ldi	r30, 0x55	; 85
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	88 60       	ori	r24, 0x08	; 8
    14b8:	8c 93       	st	X, r24
	SET_BIT(GICR,PIN_7); //Enable PIE for INT1
    14ba:	ab e5       	ldi	r26, 0x5B	; 91
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	eb e5       	ldi	r30, 0x5B	; 91
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	80 68       	ori	r24, 0x80	; 128
    14c6:	8c 93       	st	X, r24
	SET_BIT(SREG,PIN_7); //enable GIE
    14c8:	af e5       	ldi	r26, 0x5F	; 95
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	ef e5       	ldi	r30, 0x5F	; 95
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	80 68       	ori	r24, 0x80	; 128
    14d4:	8c 93       	st	X, r24
}
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <INT2_Enable>:

//INT2 Enable
void INT2_Enable(){
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,PIN_7); //disable GIE
    14e4:	af e5       	ldi	r26, 0x5F	; 95
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ef e5       	ldi	r30, 0x5F	; 95
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 77       	andi	r24, 0x7F	; 127
    14f0:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB,PIN_2); //set PB2 as input
    14f2:	a7 e3       	ldi	r26, 0x37	; 55
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e7 e3       	ldi	r30, 0x37	; 55
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8b 7f       	andi	r24, 0xFB	; 251
    14fe:	8c 93       	st	X, r24
	SET_BIT(PORTB,PIN_2); //activate pull up for PD3
    1500:	a8 e3       	ldi	r26, 0x38	; 56
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e8 e3       	ldi	r30, 0x38	; 56
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	84 60       	ori	r24, 0x04	; 4
    150c:	8c 93       	st	X, r24
	CLEAR_BIT(MCUCR,PIN_6); //sense falling edge for INT2
    150e:	a5 e5       	ldi	r26, 0x55	; 85
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e5 e5       	ldi	r30, 0x55	; 85
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8f 7b       	andi	r24, 0xBF	; 191
    151a:	8c 93       	st	X, r24
	SET_BIT(GICR,PIN_5); //Enable PIE for INT2
    151c:	ab e5       	ldi	r26, 0x5B	; 91
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	eb e5       	ldi	r30, 0x5B	; 91
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	80 62       	ori	r24, 0x20	; 32
    1528:	8c 93       	st	X, r24
	SET_BIT(SREG,PIN_7); //enable GIE
    152a:	af e5       	ldi	r26, 0x5F	; 95
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ef e5       	ldi	r30, 0x5F	; 95
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	80 68       	ori	r24, 0x80	; 128
    1536:	8c 93       	st	X, r24
}
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <SetPinDir>:
#include "DIO.h"
#include "avr/io.h"


//pin direction
void SetPinDir(u8 PORT_NAME, u8 PIN_NUMBER, u8 PIN_DIR){
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	27 97       	sbiw	r28, 0x07	; 7
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	6a 83       	std	Y+2, r22	; 0x02
    1556:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN_DIR == OUTPUT){
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	09 f0       	breq	.+2      	; 0x1560 <SetPinDir+0x22>
    155e:	6f c0       	rjmp	.+222    	; 0x163e <SetPinDir+0x100>
		switch(PORT_NAME){
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	3f 83       	std	Y+7, r19	; 0x07
    1568:	2e 83       	std	Y+6, r18	; 0x06
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	9f 81       	ldd	r25, Y+7	; 0x07
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	91 05       	cpc	r25, r1
    1572:	49 f1       	breq	.+82     	; 0x15c6 <SetPinDir+0x88>
    1574:	2e 81       	ldd	r18, Y+6	; 0x06
    1576:	3f 81       	ldd	r19, Y+7	; 0x07
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	2c f4       	brge	.+10     	; 0x1588 <SetPinDir+0x4a>
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	9f 81       	ldd	r25, Y+7	; 0x07
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	61 f0       	breq	.+24     	; 0x159e <SetPinDir+0x60>
    1586:	ce c0       	rjmp	.+412    	; 0x1724 <SetPinDir+0x1e6>
    1588:	2e 81       	ldd	r18, Y+6	; 0x06
    158a:	3f 81       	ldd	r19, Y+7	; 0x07
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	71 f1       	breq	.+92     	; 0x15ee <SetPinDir+0xb0>
    1592:	8e 81       	ldd	r24, Y+6	; 0x06
    1594:	9f 81       	ldd	r25, Y+7	; 0x07
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	91 05       	cpc	r25, r1
    159a:	e9 f1       	breq	.+122    	; 0x1616 <SetPinDir+0xd8>
    159c:	c3 c0       	rjmp	.+390    	; 0x1724 <SetPinDir+0x1e6>
			case GROUP_A:
			SET_BIT(DDRA,PIN_NUMBER);
    159e:	aa e3       	ldi	r26, 0x3A	; 58
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	ea e3       	ldi	r30, 0x3A	; 58
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <SetPinDir+0x7e>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <SetPinDir+0x7a>
    15c0:	84 2b       	or	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	af c0       	rjmp	.+350    	; 0x1724 <SetPinDir+0x1e6>
			break;
			case GROUP_B:
			SET_BIT(DDRB,PIN_NUMBER);
    15c6:	a7 e3       	ldi	r26, 0x37	; 55
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e7 e3       	ldi	r30, 0x37	; 55
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <SetPinDir+0xa6>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <SetPinDir+0xa2>
    15e8:	84 2b       	or	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	9b c0       	rjmp	.+310    	; 0x1724 <SetPinDir+0x1e6>
			break;
			case GROUP_C:
			SET_BIT(DDRC,PIN_NUMBER);
    15ee:	a4 e3       	ldi	r26, 0x34	; 52
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e4 e3       	ldi	r30, 0x34	; 52
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <SetPinDir+0xce>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <SetPinDir+0xca>
    1610:	84 2b       	or	r24, r20
    1612:	8c 93       	st	X, r24
    1614:	87 c0       	rjmp	.+270    	; 0x1724 <SetPinDir+0x1e6>
			break;
			case GROUP_D:
			SET_BIT(DDRD,PIN_NUMBER);
    1616:	a1 e3       	ldi	r26, 0x31	; 49
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e1 e3       	ldi	r30, 0x31	; 49
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <SetPinDir+0xf6>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <SetPinDir+0xf2>
    1638:	84 2b       	or	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	73 c0       	rjmp	.+230    	; 0x1724 <SetPinDir+0x1e6>
			break;
			default:
			break;
	}}
		else{
			switch(PORT_NAME){
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3d 83       	std	Y+5, r19	; 0x05
    1646:	2c 83       	std	Y+4, r18	; 0x04
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	9d 81       	ldd	r25, Y+5	; 0x05
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	59 f1       	breq	.+86     	; 0x16a8 <SetPinDir+0x16a>
    1652:	2c 81       	ldd	r18, Y+4	; 0x04
    1654:	3d 81       	ldd	r19, Y+5	; 0x05
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	2c f4       	brge	.+10     	; 0x1666 <SetPinDir+0x128>
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	69 f0       	breq	.+26     	; 0x167e <SetPinDir+0x140>
    1664:	5f c0       	rjmp	.+190    	; 0x1724 <SetPinDir+0x1e6>
    1666:	2c 81       	ldd	r18, Y+4	; 0x04
    1668:	3d 81       	ldd	r19, Y+5	; 0x05
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	89 f1       	breq	.+98     	; 0x16d2 <SetPinDir+0x194>
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <SetPinDir+0x13e>
    167a:	40 c0       	rjmp	.+128    	; 0x16fc <SetPinDir+0x1be>
    167c:	53 c0       	rjmp	.+166    	; 0x1724 <SetPinDir+0x1e6>
				case GROUP_A:
			CLEAR_BIT(DDRA,PIN_NUMBER);
    167e:	aa e3       	ldi	r26, 0x3A	; 58
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	ea e3       	ldi	r30, 0x3A	; 58
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <SetPinDir+0x15e>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <SetPinDir+0x15a>
    16a0:	80 95       	com	r24
    16a2:	84 23       	and	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	3e c0       	rjmp	.+124    	; 0x1724 <SetPinDir+0x1e6>
			break;
			case GROUP_B:
			CLEAR_BIT(DDRB,PIN_NUMBER);
    16a8:	a7 e3       	ldi	r26, 0x37	; 55
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e7 e3       	ldi	r30, 0x37	; 55
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <SetPinDir+0x188>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <SetPinDir+0x184>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	29 c0       	rjmp	.+82     	; 0x1724 <SetPinDir+0x1e6>
			break;
			case GROUP_C:
			CLEAR_BIT(DDRC,PIN_NUMBER);
    16d2:	a4 e3       	ldi	r26, 0x34	; 52
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e4 e3       	ldi	r30, 0x34	; 52
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <SetPinDir+0x1b2>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <SetPinDir+0x1ae>
    16f4:	80 95       	com	r24
    16f6:	84 23       	and	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <SetPinDir+0x1e6>
			break;
			case GROUP_D:
			CLEAR_BIT(DDRD,PIN_NUMBER);
    16fc:	a1 e3       	ldi	r26, 0x31	; 49
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e1 e3       	ldi	r30, 0x31	; 49
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <SetPinDir+0x1dc>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <SetPinDir+0x1d8>
    171e:	80 95       	com	r24
    1720:	84 23       	and	r24, r20
    1722:	8c 93       	st	X, r24
			break;
			default:
			break;
			}
		}
	}
    1724:	27 96       	adiw	r28, 0x07	; 7
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <SetPinValue>:

//pin value
void SetPinValue(u8 PORT_NAME, u8 PIN_NUMBER, u8 PIN_VALUE){
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	27 97       	sbiw	r28, 0x07	; 7
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	6a 83       	std	Y+2, r22	; 0x02
    174e:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN_VALUE == HIGH){
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	09 f0       	breq	.+2      	; 0x1758 <SetPinValue+0x22>
    1756:	6f c0       	rjmp	.+222    	; 0x1836 <SetPinValue+0x100>
		switch(PORT_NAME){
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	3f 83       	std	Y+7, r19	; 0x07
    1760:	2e 83       	std	Y+6, r18	; 0x06
    1762:	8e 81       	ldd	r24, Y+6	; 0x06
    1764:	9f 81       	ldd	r25, Y+7	; 0x07
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	91 05       	cpc	r25, r1
    176a:	49 f1       	breq	.+82     	; 0x17be <SetPinValue+0x88>
    176c:	2e 81       	ldd	r18, Y+6	; 0x06
    176e:	3f 81       	ldd	r19, Y+7	; 0x07
    1770:	22 30       	cpi	r18, 0x02	; 2
    1772:	31 05       	cpc	r19, r1
    1774:	2c f4       	brge	.+10     	; 0x1780 <SetPinValue+0x4a>
    1776:	8e 81       	ldd	r24, Y+6	; 0x06
    1778:	9f 81       	ldd	r25, Y+7	; 0x07
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	61 f0       	breq	.+24     	; 0x1796 <SetPinValue+0x60>
    177e:	ce c0       	rjmp	.+412    	; 0x191c <SetPinValue+0x1e6>
    1780:	2e 81       	ldd	r18, Y+6	; 0x06
    1782:	3f 81       	ldd	r19, Y+7	; 0x07
    1784:	22 30       	cpi	r18, 0x02	; 2
    1786:	31 05       	cpc	r19, r1
    1788:	71 f1       	breq	.+92     	; 0x17e6 <SetPinValue+0xb0>
    178a:	8e 81       	ldd	r24, Y+6	; 0x06
    178c:	9f 81       	ldd	r25, Y+7	; 0x07
    178e:	83 30       	cpi	r24, 0x03	; 3
    1790:	91 05       	cpc	r25, r1
    1792:	e9 f1       	breq	.+122    	; 0x180e <SetPinValue+0xd8>
    1794:	c3 c0       	rjmp	.+390    	; 0x191c <SetPinValue+0x1e6>
			case GROUP_A:
			SET_BIT(PORTA,PIN_NUMBER);
    1796:	ab e3       	ldi	r26, 0x3B	; 59
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	eb e3       	ldi	r30, 0x3B	; 59
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <SetPinValue+0x7e>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <SetPinValue+0x7a>
    17b8:	84 2b       	or	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	af c0       	rjmp	.+350    	; 0x191c <SetPinValue+0x1e6>
			break;
			case GROUP_B:
			SET_BIT(PORTB,PIN_NUMBER);
    17be:	a8 e3       	ldi	r26, 0x38	; 56
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e8 e3       	ldi	r30, 0x38	; 56
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <SetPinValue+0xa6>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <SetPinValue+0xa2>
    17e0:	84 2b       	or	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	9b c0       	rjmp	.+310    	; 0x191c <SetPinValue+0x1e6>
			break;
			case GROUP_C:
			SET_BIT(PORTC,PIN_NUMBER);
    17e6:	a5 e3       	ldi	r26, 0x35	; 53
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e5 e3       	ldi	r30, 0x35	; 53
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <SetPinValue+0xce>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <SetPinValue+0xca>
    1808:	84 2b       	or	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	87 c0       	rjmp	.+270    	; 0x191c <SetPinValue+0x1e6>
			break;
			case GROUP_D:
			SET_BIT(PORTD,PIN_NUMBER);
    180e:	a2 e3       	ldi	r26, 0x32	; 50
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e2 e3       	ldi	r30, 0x32	; 50
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <SetPinValue+0xf6>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <SetPinValue+0xf2>
    1830:	84 2b       	or	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	73 c0       	rjmp	.+230    	; 0x191c <SetPinValue+0x1e6>
			break;
			default:
			break;
		}}
		else{
			switch(PORT_NAME){
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3d 83       	std	Y+5, r19	; 0x05
    183e:	2c 83       	std	Y+4, r18	; 0x04
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	9d 81       	ldd	r25, Y+5	; 0x05
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	91 05       	cpc	r25, r1
    1848:	59 f1       	breq	.+86     	; 0x18a0 <SetPinValue+0x16a>
    184a:	2c 81       	ldd	r18, Y+4	; 0x04
    184c:	3d 81       	ldd	r19, Y+5	; 0x05
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	2c f4       	brge	.+10     	; 0x185e <SetPinValue+0x128>
    1854:	8c 81       	ldd	r24, Y+4	; 0x04
    1856:	9d 81       	ldd	r25, Y+5	; 0x05
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	69 f0       	breq	.+26     	; 0x1876 <SetPinValue+0x140>
    185c:	5f c0       	rjmp	.+190    	; 0x191c <SetPinValue+0x1e6>
    185e:	2c 81       	ldd	r18, Y+4	; 0x04
    1860:	3d 81       	ldd	r19, Y+5	; 0x05
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	89 f1       	breq	.+98     	; 0x18ca <SetPinValue+0x194>
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	9d 81       	ldd	r25, Y+5	; 0x05
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	91 05       	cpc	r25, r1
    1870:	09 f4       	brne	.+2      	; 0x1874 <SetPinValue+0x13e>
    1872:	40 c0       	rjmp	.+128    	; 0x18f4 <SetPinValue+0x1be>
    1874:	53 c0       	rjmp	.+166    	; 0x191c <SetPinValue+0x1e6>
			case GROUP_A:
			CLEAR_BIT(PORTA,PIN_NUMBER);
    1876:	ab e3       	ldi	r26, 0x3B	; 59
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	eb e3       	ldi	r30, 0x3B	; 59
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	48 2f       	mov	r20, r24
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	02 2e       	mov	r0, r18
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <SetPinValue+0x15e>
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	0a 94       	dec	r0
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <SetPinValue+0x15a>
    1898:	80 95       	com	r24
    189a:	84 23       	and	r24, r20
    189c:	8c 93       	st	X, r24
    189e:	3e c0       	rjmp	.+124    	; 0x191c <SetPinValue+0x1e6>
			break;
			case GROUP_B:
			CLEAR_BIT(PORTB,PIN_NUMBER);
    18a0:	a8 e3       	ldi	r26, 0x38	; 56
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e8 e3       	ldi	r30, 0x38	; 56
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <SetPinValue+0x188>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <SetPinValue+0x184>
    18c2:	80 95       	com	r24
    18c4:	84 23       	and	r24, r20
    18c6:	8c 93       	st	X, r24
    18c8:	29 c0       	rjmp	.+82     	; 0x191c <SetPinValue+0x1e6>
			break;
			case GROUP_C:
			CLEAR_BIT(PORTC,PIN_NUMBER);
    18ca:	a5 e3       	ldi	r26, 0x35	; 53
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e5 e3       	ldi	r30, 0x35	; 53
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <SetPinValue+0x1b2>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <SetPinValue+0x1ae>
    18ec:	80 95       	com	r24
    18ee:	84 23       	and	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	14 c0       	rjmp	.+40     	; 0x191c <SetPinValue+0x1e6>
			break;
			case GROUP_D:
			CLEAR_BIT(PORTD,PIN_NUMBER);
    18f4:	a2 e3       	ldi	r26, 0x32	; 50
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e2 e3       	ldi	r30, 0x32	; 50
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <SetPinValue+0x1dc>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <SetPinValue+0x1d8>
    1916:	80 95       	com	r24
    1918:	84 23       	and	r24, r20
    191a:	8c 93       	st	X, r24
			break;
			default:
			break;
			}
		}
	}
    191c:	27 96       	adiw	r28, 0x07	; 7
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <ReadPinValue>:
	
	
//read pin
u8 ReadPinValue(u8 PORT_NAME, u8 PIN_NUMBER)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <ReadPinValue+0x6>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <ReadPinValue+0x8>
    1936:	0f 92       	push	r0
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	8a 83       	std	Y+2, r24	; 0x02
    193e:	6b 83       	std	Y+3, r22	; 0x03
u8 value;
switch(PORT_NAME){
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	3d 83       	std	Y+5, r19	; 0x05
    1948:	2c 83       	std	Y+4, r18	; 0x04
    194a:	4c 81       	ldd	r20, Y+4	; 0x04
    194c:	5d 81       	ldd	r21, Y+5	; 0x05
    194e:	41 30       	cpi	r20, 0x01	; 1
    1950:	51 05       	cpc	r21, r1
    1952:	41 f1       	breq	.+80     	; 0x19a4 <ReadPinValue+0x76>
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	9d 81       	ldd	r25, Y+5	; 0x05
    1958:	82 30       	cpi	r24, 0x02	; 2
    195a:	91 05       	cpc	r25, r1
    195c:	34 f4       	brge	.+12     	; 0x196a <ReadPinValue+0x3c>
    195e:	2c 81       	ldd	r18, Y+4	; 0x04
    1960:	3d 81       	ldd	r19, Y+5	; 0x05
    1962:	21 15       	cp	r18, r1
    1964:	31 05       	cpc	r19, r1
    1966:	61 f0       	breq	.+24     	; 0x1980 <ReadPinValue+0x52>
    1968:	52 c0       	rjmp	.+164    	; 0x1a0e <ReadPinValue+0xe0>
    196a:	4c 81       	ldd	r20, Y+4	; 0x04
    196c:	5d 81       	ldd	r21, Y+5	; 0x05
    196e:	42 30       	cpi	r20, 0x02	; 2
    1970:	51 05       	cpc	r21, r1
    1972:	51 f1       	breq	.+84     	; 0x19c8 <ReadPinValue+0x9a>
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	83 30       	cpi	r24, 0x03	; 3
    197a:	91 05       	cpc	r25, r1
    197c:	b9 f1       	breq	.+110    	; 0x19ec <ReadPinValue+0xbe>
    197e:	47 c0       	rjmp	.+142    	; 0x1a0e <ReadPinValue+0xe0>
	case GROUP_A:
			value = READ_BIT(PINA,PIN_NUMBER);
    1980:	e9 e3       	ldi	r30, 0x39	; 57
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a9 01       	movw	r20, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <ReadPinValue+0x6a>
    1994:	55 95       	asr	r21
    1996:	47 95       	ror	r20
    1998:	8a 95       	dec	r24
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <ReadPinValue+0x66>
    199c:	ca 01       	movw	r24, r20
    199e:	81 70       	andi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	35 c0       	rjmp	.+106    	; 0x1a0e <ReadPinValue+0xe0>
			break;
			case GROUP_B:
			value = READ_BIT(PINB,PIN_NUMBER);
    19a4:	e6 e3       	ldi	r30, 0x36	; 54
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a9 01       	movw	r20, r18
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <ReadPinValue+0x8e>
    19b8:	55 95       	asr	r21
    19ba:	47 95       	ror	r20
    19bc:	8a 95       	dec	r24
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <ReadPinValue+0x8a>
    19c0:	ca 01       	movw	r24, r20
    19c2:	81 70       	andi	r24, 0x01	; 1
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	23 c0       	rjmp	.+70     	; 0x1a0e <ReadPinValue+0xe0>
			break;
			case GROUP_C:
			value = READ_BIT(PINC,PIN_NUMBER);
    19c8:	e3 e3       	ldi	r30, 0x33	; 51
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a9 01       	movw	r20, r18
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <ReadPinValue+0xb2>
    19dc:	55 95       	asr	r21
    19de:	47 95       	ror	r20
    19e0:	8a 95       	dec	r24
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <ReadPinValue+0xae>
    19e4:	ca 01       	movw	r24, r20
    19e6:	81 70       	andi	r24, 0x01	; 1
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	11 c0       	rjmp	.+34     	; 0x1a0e <ReadPinValue+0xe0>
			break;
			case GROUP_D:
			value=READ_BIT(PIND,PIN_NUMBER);
    19ec:	e0 e3       	ldi	r30, 0x30	; 48
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	88 2f       	mov	r24, r24
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a9 01       	movw	r20, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <ReadPinValue+0xd6>
    1a00:	55 95       	asr	r21
    1a02:	47 95       	ror	r20
    1a04:	8a 95       	dec	r24
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <ReadPinValue+0xd2>
    1a08:	ca 01       	movw	r24, r20
    1a0a:	81 70       	andi	r24, 0x01	; 1
    1a0c:	89 83       	std	Y+1, r24	; 0x01
			break;
			default:
			break;
}
return value;	
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <SetGroupDir>:

//group direction
void SetGroupDir(u8 PORT_NAME,u8 GROUP_DIR){
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <SetGroupDir+0x6>
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <SetGroupDir+0x8>
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	6a 83       	std	Y+2, r22	; 0x02
		switch(PORT_NAME){
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	3c 83       	std	Y+4, r19	; 0x04
    1a38:	2b 83       	std	Y+3, r18	; 0x03
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	91 05       	cpc	r25, r1
    1a42:	d1 f0       	breq	.+52     	; 0x1a78 <SetGroupDir+0x58>
    1a44:	2b 81       	ldd	r18, Y+3	; 0x03
    1a46:	3c 81       	ldd	r19, Y+4	; 0x04
    1a48:	22 30       	cpi	r18, 0x02	; 2
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	2c f4       	brge	.+10     	; 0x1a58 <SetGroupDir+0x38>
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	61 f0       	breq	.+24     	; 0x1a6e <SetGroupDir+0x4e>
    1a56:	1e c0       	rjmp	.+60     	; 0x1a94 <SetGroupDir+0x74>
    1a58:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5c:	22 30       	cpi	r18, 0x02	; 2
    1a5e:	31 05       	cpc	r19, r1
    1a60:	81 f0       	breq	.+32     	; 0x1a82 <SetGroupDir+0x62>
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	91 05       	cpc	r25, r1
    1a6a:	81 f0       	breq	.+32     	; 0x1a8c <SetGroupDir+0x6c>
    1a6c:	13 c0       	rjmp	.+38     	; 0x1a94 <SetGroupDir+0x74>
			case GROUP_A:
			DDRA=GROUP_DIR;
    1a6e:	ea e3       	ldi	r30, 0x3A	; 58
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	80 83       	st	Z, r24
    1a76:	0e c0       	rjmp	.+28     	; 0x1a94 <SetGroupDir+0x74>
			break;
			case GROUP_B:
			DDRB=GROUP_DIR;
    1a78:	e7 e3       	ldi	r30, 0x37	; 55
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	80 83       	st	Z, r24
    1a80:	09 c0       	rjmp	.+18     	; 0x1a94 <SetGroupDir+0x74>
			break;
			case GROUP_C:
			DDRC=GROUP_DIR;
    1a82:	e4 e3       	ldi	r30, 0x34	; 52
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	80 83       	st	Z, r24
    1a8a:	04 c0       	rjmp	.+8      	; 0x1a94 <SetGroupDir+0x74>
			break;
			case GROUP_D:
			DDRD=GROUP_DIR;
    1a8c:	e1 e3       	ldi	r30, 0x31	; 49
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	80 83       	st	Z, r24
			break;
			default:
			break;
		}
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <SetGroupValue>:

//group value
void SetGroupValue(u8 PORT_NAME, u8 GROUP_VALUE){
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <SetGroupValue+0x6>
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <SetGroupValue+0x8>
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	6a 83       	std	Y+2, r22	; 0x02
		switch(PORT_NAME){
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	3c 83       	std	Y+4, r19	; 0x04
    1aba:	2b 83       	std	Y+3, r18	; 0x03
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	d1 f0       	breq	.+52     	; 0x1afa <SetGroupValue+0x58>
    1ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aca:	22 30       	cpi	r18, 0x02	; 2
    1acc:	31 05       	cpc	r19, r1
    1ace:	2c f4       	brge	.+10     	; 0x1ada <SetGroupValue+0x38>
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	61 f0       	breq	.+24     	; 0x1af0 <SetGroupValue+0x4e>
    1ad8:	1e c0       	rjmp	.+60     	; 0x1b16 <SetGroupValue+0x74>
    1ada:	2b 81       	ldd	r18, Y+3	; 0x03
    1adc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	81 f0       	breq	.+32     	; 0x1b04 <SetGroupValue+0x62>
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	83 30       	cpi	r24, 0x03	; 3
    1aea:	91 05       	cpc	r25, r1
    1aec:	81 f0       	breq	.+32     	; 0x1b0e <SetGroupValue+0x6c>
    1aee:	13 c0       	rjmp	.+38     	; 0x1b16 <SetGroupValue+0x74>
			case GROUP_A:
			PORTA=GROUP_VALUE;
    1af0:	eb e3       	ldi	r30, 0x3B	; 59
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	80 83       	st	Z, r24
    1af8:	0e c0       	rjmp	.+28     	; 0x1b16 <SetGroupValue+0x74>
			break;
			case GROUP_B:
			PORTB=GROUP_VALUE;
    1afa:	e8 e3       	ldi	r30, 0x38	; 56
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	80 83       	st	Z, r24
    1b02:	09 c0       	rjmp	.+18     	; 0x1b16 <SetGroupValue+0x74>
			break;
			case GROUP_C:
			PORTC=GROUP_VALUE;
    1b04:	e5 e3       	ldi	r30, 0x35	; 53
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	80 83       	st	Z, r24
    1b0c:	04 c0       	rjmp	.+8      	; 0x1b16 <SetGroupValue+0x74>
			break;
			case GROUP_D:
			PORTD=GROUP_VALUE;
    1b0e:	e2 e3       	ldi	r30, 0x32	; 50
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	80 83       	st	Z, r24
			break;
			default:
			break;
		}
		}
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <ToggleGroupValue>:

//Toggle group value
void ToggleGroupValue(u8 PORT_NAME){
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <ToggleGroupValue+0x6>
    1b2a:	0f 92       	push	r0
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	89 83       	std	Y+1, r24	; 0x01
	switch(PORT_NAME){
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	3b 83       	std	Y+3, r19	; 0x03
    1b3a:	2a 83       	std	Y+2, r18	; 0x02
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	91 05       	cpc	r25, r1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <ToggleGroupValue+0x24>
    1b46:	58 c0       	rjmp	.+176    	; 0x1bf8 <ToggleGroupValue+0xd4>
    1b48:	2a 81       	ldd	r18, Y+2	; 0x02
    1b4a:	3b 81       	ldd	r19, Y+3	; 0x03
    1b4c:	22 30       	cpi	r18, 0x02	; 2
    1b4e:	31 05       	cpc	r19, r1
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <ToggleGroupValue+0x38>
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	9b 81       	ldd	r25, Y+3	; 0x03
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	71 f0       	breq	.+28     	; 0x1b76 <ToggleGroupValue+0x52>
    1b5a:	10 c1       	rjmp	.+544    	; 0x1d7c <ToggleGroupValue+0x258>
    1b5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1b5e:	3b 81       	ldd	r19, Y+3	; 0x03
    1b60:	22 30       	cpi	r18, 0x02	; 2
    1b62:	31 05       	cpc	r19, r1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <ToggleGroupValue+0x44>
    1b66:	89 c0       	rjmp	.+274    	; 0x1c7a <ToggleGroupValue+0x156>
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6c:	83 30       	cpi	r24, 0x03	; 3
    1b6e:	91 05       	cpc	r25, r1
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <ToggleGroupValue+0x50>
    1b72:	c4 c0       	rjmp	.+392    	; 0x1cfc <ToggleGroupValue+0x1d8>
    1b74:	03 c1       	rjmp	.+518    	; 0x1d7c <ToggleGroupValue+0x258>
				case GROUP_A:
				TOGGLE_BIT(PORTA,PIN_0);
    1b76:	ab e3       	ldi	r26, 0x3B	; 59
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	eb e3       	ldi	r30, 0x3B	; 59
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	90 81       	ld	r25, Z
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	89 27       	eor	r24, r25
    1b84:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,PIN_1);
    1b86:	ab e3       	ldi	r26, 0x3B	; 59
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	eb e3       	ldi	r30, 0x3B	; 59
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	90 81       	ld	r25, Z
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	89 27       	eor	r24, r25
    1b94:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,PIN_2);
    1b96:	ab e3       	ldi	r26, 0x3B	; 59
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	eb e3       	ldi	r30, 0x3B	; 59
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	90 81       	ld	r25, Z
    1ba0:	84 e0       	ldi	r24, 0x04	; 4
    1ba2:	89 27       	eor	r24, r25
    1ba4:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,PIN_3);
    1ba6:	ab e3       	ldi	r26, 0x3B	; 59
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	eb e3       	ldi	r30, 0x3B	; 59
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	90 81       	ld	r25, Z
    1bb0:	88 e0       	ldi	r24, 0x08	; 8
    1bb2:	89 27       	eor	r24, r25
    1bb4:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,PIN_4);
    1bb6:	ab e3       	ldi	r26, 0x3B	; 59
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	eb e3       	ldi	r30, 0x3B	; 59
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	90 81       	ld	r25, Z
    1bc0:	80 e1       	ldi	r24, 0x10	; 16
    1bc2:	89 27       	eor	r24, r25
    1bc4:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,PIN_5);
    1bc6:	ab e3       	ldi	r26, 0x3B	; 59
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	eb e3       	ldi	r30, 0x3B	; 59
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	90 81       	ld	r25, Z
    1bd0:	80 e2       	ldi	r24, 0x20	; 32
    1bd2:	89 27       	eor	r24, r25
    1bd4:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,PIN_6);
    1bd6:	ab e3       	ldi	r26, 0x3B	; 59
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	eb e3       	ldi	r30, 0x3B	; 59
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	90 81       	ld	r25, Z
    1be0:	80 e4       	ldi	r24, 0x40	; 64
    1be2:	89 27       	eor	r24, r25
    1be4:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,PIN_7);
    1be6:	ab e3       	ldi	r26, 0x3B	; 59
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	eb e3       	ldi	r30, 0x3B	; 59
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	90 81       	ld	r25, Z
    1bf0:	80 e8       	ldi	r24, 0x80	; 128
    1bf2:	89 27       	eor	r24, r25
    1bf4:	8c 93       	st	X, r24
    1bf6:	c2 c0       	rjmp	.+388    	; 0x1d7c <ToggleGroupValue+0x258>
				break;
				case GROUP_B:
					TOGGLE_BIT(PORTB,PIN_0);
    1bf8:	a8 e3       	ldi	r26, 0x38	; 56
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e8 e3       	ldi	r30, 0x38	; 56
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	90 81       	ld	r25, Z
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	89 27       	eor	r24, r25
    1c06:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTB,PIN_1);
    1c08:	a8 e3       	ldi	r26, 0x38	; 56
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e8 e3       	ldi	r30, 0x38	; 56
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	90 81       	ld	r25, Z
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	89 27       	eor	r24, r25
    1c16:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTB,PIN_2);
    1c18:	a8 e3       	ldi	r26, 0x38	; 56
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e8 e3       	ldi	r30, 0x38	; 56
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	90 81       	ld	r25, Z
    1c22:	84 e0       	ldi	r24, 0x04	; 4
    1c24:	89 27       	eor	r24, r25
    1c26:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTB,PIN_3);
    1c28:	a8 e3       	ldi	r26, 0x38	; 56
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e8 e3       	ldi	r30, 0x38	; 56
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	90 81       	ld	r25, Z
    1c32:	88 e0       	ldi	r24, 0x08	; 8
    1c34:	89 27       	eor	r24, r25
    1c36:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTB,PIN_4);
    1c38:	a8 e3       	ldi	r26, 0x38	; 56
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e8 e3       	ldi	r30, 0x38	; 56
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	90 81       	ld	r25, Z
    1c42:	80 e1       	ldi	r24, 0x10	; 16
    1c44:	89 27       	eor	r24, r25
    1c46:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTB,PIN_5);
    1c48:	a8 e3       	ldi	r26, 0x38	; 56
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e8 e3       	ldi	r30, 0x38	; 56
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	90 81       	ld	r25, Z
    1c52:	80 e2       	ldi	r24, 0x20	; 32
    1c54:	89 27       	eor	r24, r25
    1c56:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTB,PIN_6);
    1c58:	a8 e3       	ldi	r26, 0x38	; 56
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e8 e3       	ldi	r30, 0x38	; 56
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	90 81       	ld	r25, Z
    1c62:	80 e4       	ldi	r24, 0x40	; 64
    1c64:	89 27       	eor	r24, r25
    1c66:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTB,PIN_7);
    1c68:	a8 e3       	ldi	r26, 0x38	; 56
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e8 e3       	ldi	r30, 0x38	; 56
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	90 81       	ld	r25, Z
    1c72:	80 e8       	ldi	r24, 0x80	; 128
    1c74:	89 27       	eor	r24, r25
    1c76:	8c 93       	st	X, r24
    1c78:	81 c0       	rjmp	.+258    	; 0x1d7c <ToggleGroupValue+0x258>
				break;
				case GROUP_C:
					TOGGLE_BIT(PORTC,PIN_0);
    1c7a:	a5 e3       	ldi	r26, 0x35	; 53
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e5 e3       	ldi	r30, 0x35	; 53
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	90 81       	ld	r25, Z
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	89 27       	eor	r24, r25
    1c88:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTC,PIN_1);
    1c8a:	a5 e3       	ldi	r26, 0x35	; 53
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e5 e3       	ldi	r30, 0x35	; 53
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	90 81       	ld	r25, Z
    1c94:	82 e0       	ldi	r24, 0x02	; 2
    1c96:	89 27       	eor	r24, r25
    1c98:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTC,PIN_2);
    1c9a:	a5 e3       	ldi	r26, 0x35	; 53
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e5 e3       	ldi	r30, 0x35	; 53
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	90 81       	ld	r25, Z
    1ca4:	84 e0       	ldi	r24, 0x04	; 4
    1ca6:	89 27       	eor	r24, r25
    1ca8:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTC,PIN_3);
    1caa:	a5 e3       	ldi	r26, 0x35	; 53
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e5 e3       	ldi	r30, 0x35	; 53
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	90 81       	ld	r25, Z
    1cb4:	88 e0       	ldi	r24, 0x08	; 8
    1cb6:	89 27       	eor	r24, r25
    1cb8:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTC,PIN_4);
    1cba:	a5 e3       	ldi	r26, 0x35	; 53
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e5 e3       	ldi	r30, 0x35	; 53
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	90 81       	ld	r25, Z
    1cc4:	80 e1       	ldi	r24, 0x10	; 16
    1cc6:	89 27       	eor	r24, r25
    1cc8:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTC,PIN_5);
    1cca:	a5 e3       	ldi	r26, 0x35	; 53
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e3       	ldi	r30, 0x35	; 53
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	90 81       	ld	r25, Z
    1cd4:	80 e2       	ldi	r24, 0x20	; 32
    1cd6:	89 27       	eor	r24, r25
    1cd8:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTC,PIN_6);
    1cda:	a5 e3       	ldi	r26, 0x35	; 53
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e5 e3       	ldi	r30, 0x35	; 53
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	90 81       	ld	r25, Z
    1ce4:	80 e4       	ldi	r24, 0x40	; 64
    1ce6:	89 27       	eor	r24, r25
    1ce8:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTC,PIN_7);
    1cea:	a5 e3       	ldi	r26, 0x35	; 53
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e5 e3       	ldi	r30, 0x35	; 53
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	90 81       	ld	r25, Z
    1cf4:	80 e8       	ldi	r24, 0x80	; 128
    1cf6:	89 27       	eor	r24, r25
    1cf8:	8c 93       	st	X, r24
    1cfa:	40 c0       	rjmp	.+128    	; 0x1d7c <ToggleGroupValue+0x258>
				break;
				case GROUP_D:
					TOGGLE_BIT(PORTD,PIN_0);
    1cfc:	a2 e3       	ldi	r26, 0x32	; 50
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e2 e3       	ldi	r30, 0x32	; 50
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	90 81       	ld	r25, Z
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	89 27       	eor	r24, r25
    1d0a:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTD,PIN_1);
    1d0c:	a2 e3       	ldi	r26, 0x32	; 50
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e2 e3       	ldi	r30, 0x32	; 50
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	90 81       	ld	r25, Z
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	89 27       	eor	r24, r25
    1d1a:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTD,PIN_2);
    1d1c:	a2 e3       	ldi	r26, 0x32	; 50
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e2 e3       	ldi	r30, 0x32	; 50
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	90 81       	ld	r25, Z
    1d26:	84 e0       	ldi	r24, 0x04	; 4
    1d28:	89 27       	eor	r24, r25
    1d2a:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTD,PIN_3);
    1d2c:	a2 e3       	ldi	r26, 0x32	; 50
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e2 e3       	ldi	r30, 0x32	; 50
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	90 81       	ld	r25, Z
    1d36:	88 e0       	ldi	r24, 0x08	; 8
    1d38:	89 27       	eor	r24, r25
    1d3a:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTD,PIN_4);
    1d3c:	a2 e3       	ldi	r26, 0x32	; 50
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e2 e3       	ldi	r30, 0x32	; 50
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	90 81       	ld	r25, Z
    1d46:	80 e1       	ldi	r24, 0x10	; 16
    1d48:	89 27       	eor	r24, r25
    1d4a:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTD,PIN_5);
    1d4c:	a2 e3       	ldi	r26, 0x32	; 50
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e2 e3       	ldi	r30, 0x32	; 50
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	90 81       	ld	r25, Z
    1d56:	80 e2       	ldi	r24, 0x20	; 32
    1d58:	89 27       	eor	r24, r25
    1d5a:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTD,PIN_6);
    1d5c:	a2 e3       	ldi	r26, 0x32	; 50
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e2 e3       	ldi	r30, 0x32	; 50
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	90 81       	ld	r25, Z
    1d66:	80 e4       	ldi	r24, 0x40	; 64
    1d68:	89 27       	eor	r24, r25
    1d6a:	8c 93       	st	X, r24
					TOGGLE_BIT(PORTD,PIN_7);
    1d6c:	a2 e3       	ldi	r26, 0x32	; 50
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e2 e3       	ldi	r30, 0x32	; 50
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	90 81       	ld	r25, Z
    1d76:	80 e8       	ldi	r24, 0x80	; 128
    1d78:	89 27       	eor	r24, r25
    1d7a:	8c 93       	st	X, r24
				break;
				default:
				break;
			}
}
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <ReadGroupValue>:
//read group
u8 ReadGroupValue(u8 PORT_NAME){
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <ReadGroupValue+0x6>
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <ReadGroupValue+0x8>
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	8a 83       	std	Y+2, r24	; 0x02
	u8 value;
switch(PORT_NAME){
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	3c 83       	std	Y+4, r19	; 0x04
    1d9e:	2b 83       	std	Y+3, r18	; 0x03
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	91 05       	cpc	r25, r1
    1da8:	d1 f0       	breq	.+52     	; 0x1dde <ReadGroupValue+0x56>
    1daa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dac:	3c 81       	ldd	r19, Y+4	; 0x04
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <ReadGroupValue+0x36>
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <ReadGroupValue+0x4c>
    1dbc:	1e c0       	rjmp	.+60     	; 0x1dfa <ReadGroupValue+0x72>
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc2:	22 30       	cpi	r18, 0x02	; 2
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	81 f0       	breq	.+32     	; 0x1de8 <ReadGroupValue+0x60>
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	83 30       	cpi	r24, 0x03	; 3
    1dce:	91 05       	cpc	r25, r1
    1dd0:	81 f0       	breq	.+32     	; 0x1df2 <ReadGroupValue+0x6a>
    1dd2:	13 c0       	rjmp	.+38     	; 0x1dfa <ReadGroupValue+0x72>
	case GROUP_A:
			value = PINA;
    1dd4:	e9 e3       	ldi	r30, 0x39	; 57
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	0e c0       	rjmp	.+28     	; 0x1dfa <ReadGroupValue+0x72>
			break;
			case GROUP_B:
			value = PINB;
    1dde:	e6 e3       	ldi	r30, 0x36	; 54
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	09 c0       	rjmp	.+18     	; 0x1dfa <ReadGroupValue+0x72>
			break;
			case GROUP_C:
			value = PINC;
    1de8:	e3 e3       	ldi	r30, 0x33	; 51
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <ReadGroupValue+0x72>
			break;
			case GROUP_D:
			value = PIND;
    1df2:	e0 e3       	ldi	r30, 0x30	; 48
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	89 83       	std	Y+1, r24	; 0x01
			break;
			default:
			break;
}
return value;
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
}	
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <ADC_VoidInit>:
#include "avr/io.h"
#include "ADC.h"

//ADC Initialization
void ADC_VoidInit(void)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
#if ADC_VOLTAGE == ADC_AREF_INT

	SET_BIT(ADMUX,PIN_7);
    1e12:	a7 e2       	ldi	r26, 0x27	; 39
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e7 e2       	ldi	r30, 0x27	; 39
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 68       	ori	r24, 0x80	; 128
    1e1e:	8c 93       	st	X, r24
	SET_BIT(ADMUX,PIN_6);
    1e20:	a7 e2       	ldi	r26, 0x27	; 39
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e7 e2       	ldi	r30, 0x27	; 39
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 64       	ori	r24, 0x40	; 64
    1e2c:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,PIN_7);
	SET_BIT(ADMUX,PIN_6);

#endif

	ADMUX=(ADMUX & 0xE0) | (ADC_CHANNEL & 0x1F); // BIT Masking
    1e2e:	a7 e2       	ldi	r26, 0x27	; 39
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e7 e2       	ldi	r30, 0x27	; 39
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	80 7e       	andi	r24, 0xE0	; 224
    1e3a:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,PIN_7);
    1e3c:	a6 e2       	ldi	r26, 0x26	; 38
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e6 e2       	ldi	r30, 0x26	; 38
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	80 68       	ori	r24, 0x80	; 128
    1e48:	8c 93       	st	X, r24

#if ADC_INT_MODE == ADC_DISABLE_INT
	CLEAR_BIT(ADCSRA,PIN_3);
    1e4a:	a6 e2       	ldi	r26, 0x26	; 38
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e6 e2       	ldi	r30, 0x26	; 38
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	87 7f       	andi	r24, 0xF7	; 247
    1e56:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,PIN_2);
	SET_BIT(ADCSRA,PIN_1);
	SET_BIT(ADCSRA,PIN_0);

#elif ADC_PRESCALER == ADC_PRE_64
	SET_BIT(ADCSRA,PIN_2);
    1e58:	a6 e2       	ldi	r26, 0x26	; 38
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e6 e2       	ldi	r30, 0x26	; 38
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	84 60       	ori	r24, 0x04	; 4
    1e64:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,PIN_1);
    1e66:	a6 e2       	ldi	r26, 0x26	; 38
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e6 e2       	ldi	r30, 0x26	; 38
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	82 60       	ori	r24, 0x02	; 2
    1e72:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,PIN_0);
    1e74:	a6 e2       	ldi	r26, 0x26	; 38
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e6 e2       	ldi	r30, 0x26	; 38
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	8e 7f       	andi	r24, 0xFE	; 254
    1e80:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,PIN_2);
	CLEAR_BIT(ADCSRA,PIN_1);
	CLEAR_BIT(ADCSRA,PIN_0);

#endif
}
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <ADC_VoidStartConversion>:

//Start Conversion
void ADC_VoidStartConversion(void){
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
SET_BIT(ADCSRA,PIN_6);
    1e90:	a6 e2       	ldi	r26, 0x26	; 38
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e6 e2       	ldi	r30, 0x26	; 38
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	80 64       	ori	r24, 0x40	; 64
    1e9c:	8c 93       	st	X, r24
}
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <ADC_u16ReadData>:

//Read Data
u16 ADC_u16ReadData(u8 ADC_u8CopyChannelId){
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	0f 92       	push	r0
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	89 83       	std	Y+1, r24	; 0x01
	ADMUX=(ADMUX & 0xE0) | (ADC_u8CopyChannelId & 0x1F); // BIT Masking
    1eb0:	a7 e2       	ldi	r26, 0x27	; 39
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e7 e2       	ldi	r30, 0x27	; 39
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	98 2f       	mov	r25, r24
    1ebc:	90 7e       	andi	r25, 0xE0	; 224
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	8f 71       	andi	r24, 0x1F	; 31
    1ec2:	89 2b       	or	r24, r25
    1ec4:	8c 93       	st	X, r24

	ADC_VoidStartConversion();
    1ec6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <ADC_VoidStartConversion>

#if ADC_INT_MODE == ADC_DISABLE_INT

	while (READ_BIT(ADCSRA,PIN_4)==0);
    1eca:	e6 e2       	ldi	r30, 0x26	; 38
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	82 95       	swap	r24
    1ed2:	8f 70       	andi	r24, 0x0F	; 15
    1ed4:	88 2f       	mov	r24, r24
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	81 70       	andi	r24, 0x01	; 1
    1eda:	90 70       	andi	r25, 0x00	; 0
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	a9 f3       	breq	.-22     	; 0x1eca <ADC_u16ReadData+0x26>
	SET_BIT(ADCSRA,PIN_4); //Clear Flag by setting flag
    1ee0:	a6 e2       	ldi	r26, 0x26	; 38
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e6 e2       	ldi	r30, 0x26	; 38
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 61       	ori	r24, 0x10	; 16
    1eec:	8c 93       	st	X, r24

#elif ADC_INT_MODE == ADC_ENABLE_INT
#endif
	return ADC;
    1eee:	e4 e2       	ldi	r30, 0x24	; 36
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	91 81       	ldd	r25, Z+1	; 0x01
}
    1ef6:	0f 90       	pop	r0
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <Ultrasonic>:
#include "../../MCAL/DIO/DIO_CFG.h"
#include "../../MCAL/DIO/DIO.h"



u32 Ultrasonic(){
    1efe:	0f 93       	push	r16
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	6b 97       	sbiw	r28, 0x1b	; 27
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
	u32 distance;
	SET_BIT(DDRA,TRIG);//TRIG PA0 as output
    1f14:	aa e3       	ldi	r26, 0x3A	; 58
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	ea e3       	ldi	r30, 0x3A	; 58
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	81 60       	ori	r24, 0x01	; 1
    1f20:	8c 93       	st	X, r24
	SET_BIT(PORTA,TRIG);//Set TRIG PA0 High
    1f22:	ab e3       	ldi	r26, 0x3B	; 59
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	eb e3       	ldi	r30, 0x3B	; 59
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	81 60       	ori	r24, 0x01	; 1
    1f2e:	8c 93       	st	X, r24
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 e2       	ldi	r26, 0x20	; 32
    1f36:	b1 e4       	ldi	r27, 0x41	; 65
    1f38:	8d 8b       	std	Y+21, r24	; 0x15
    1f3a:	9e 8b       	std	Y+22, r25	; 0x16
    1f3c:	af 8b       	std	Y+23, r26	; 0x17
    1f3e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f40:	6d 89       	ldd	r22, Y+21	; 0x15
    1f42:	7e 89       	ldd	r23, Y+22	; 0x16
    1f44:	8f 89       	ldd	r24, Y+23	; 0x17
    1f46:	98 8d       	ldd	r25, Y+24	; 0x18
    1f48:	2b ea       	ldi	r18, 0xAB	; 171
    1f4a:	3a ea       	ldi	r19, 0xAA	; 170
    1f4c:	4a e2       	ldi	r20, 0x2A	; 42
    1f4e:	50 e4       	ldi	r21, 0x40	; 64
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	89 8b       	std	Y+17, r24	; 0x11
    1f5a:	9a 8b       	std	Y+18, r25	; 0x12
    1f5c:	ab 8b       	std	Y+19, r26	; 0x13
    1f5e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f60:	69 89       	ldd	r22, Y+17	; 0x11
    1f62:	7a 89       	ldd	r23, Y+18	; 0x12
    1f64:	8b 89       	ldd	r24, Y+19	; 0x13
    1f66:	9c 89       	ldd	r25, Y+20	; 0x14
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	1c f4       	brge	.+6      	; 0x1f7e <Ultrasonic+0x80>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	88 8b       	std	Y+16, r24	; 0x10
    1f7c:	91 c0       	rjmp	.+290    	; 0x20a0 <Ultrasonic+0x1a2>
	else if (__tmp > 255)
    1f7e:	69 89       	ldd	r22, Y+17	; 0x11
    1f80:	7a 89       	ldd	r23, Y+18	; 0x12
    1f82:	8b 89       	ldd	r24, Y+19	; 0x13
    1f84:	9c 89       	ldd	r25, Y+20	; 0x14
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4f e7       	ldi	r20, 0x7F	; 127
    1f8c:	53 e4       	ldi	r21, 0x43	; 67
    1f8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	0c f0       	brlt	.+2      	; 0x1f98 <Ultrasonic+0x9a>
    1f96:	7b c0       	rjmp	.+246    	; 0x208e <Ultrasonic+0x190>
	{
		_delay_ms(__us / 1000.0);
    1f98:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	4a e7       	ldi	r20, 0x7A	; 122
    1fa6:	54 e4       	ldi	r21, 0x44	; 68
    1fa8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8c 87       	std	Y+12, r24	; 0x0c
    1fb2:	9d 87       	std	Y+13, r25	; 0x0d
    1fb4:	ae 87       	std	Y+14, r26	; 0x0e
    1fb6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fba:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fbc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fbe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a ef       	ldi	r20, 0xFA	; 250
    1fc6:	54 e4       	ldi	r21, 0x44	; 68
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	88 87       	std	Y+8, r24	; 0x08
    1fd2:	99 87       	std	Y+9, r25	; 0x09
    1fd4:	aa 87       	std	Y+10, r26	; 0x0a
    1fd6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fd8:	68 85       	ldd	r22, Y+8	; 0x08
    1fda:	79 85       	ldd	r23, Y+9	; 0x09
    1fdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fde:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <Ultrasonic+0xfc>
		__ticks = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9f 83       	std	Y+7, r25	; 0x07
    1ff6:	8e 83       	std	Y+6, r24	; 0x06
    1ff8:	3f c0       	rjmp	.+126    	; 0x2078 <Ultrasonic+0x17a>
	else if (__tmp > 65535)
    1ffa:	68 85       	ldd	r22, Y+8	; 0x08
    1ffc:	79 85       	ldd	r23, Y+9	; 0x09
    1ffe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2000:	9b 85       	ldd	r25, Y+11	; 0x0b
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	4c f5       	brge	.+82     	; 0x2064 <Ultrasonic+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	6c 85       	ldd	r22, Y+12	; 0x0c
    2014:	7d 85       	ldd	r23, Y+13	; 0x0d
    2016:	8e 85       	ldd	r24, Y+14	; 0x0e
    2018:	9f 85       	ldd	r25, Y+15	; 0x0f
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9f 83       	std	Y+7, r25	; 0x07
    2038:	8e 83       	std	Y+6, r24	; 0x06
    203a:	0f c0       	rjmp	.+30     	; 0x205a <Ultrasonic+0x15c>
    203c:	88 ec       	ldi	r24, 0xC8	; 200
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9d 83       	std	Y+5, r25	; 0x05
    2042:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	9d 81       	ldd	r25, Y+5	; 0x05
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <Ultrasonic+0x14a>
    204c:	9d 83       	std	Y+5, r25	; 0x05
    204e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	8e 81       	ldd	r24, Y+6	; 0x06
    2052:	9f 81       	ldd	r25, Y+7	; 0x07
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9f 83       	std	Y+7, r25	; 0x07
    2058:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205a:	8e 81       	ldd	r24, Y+6	; 0x06
    205c:	9f 81       	ldd	r25, Y+7	; 0x07
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	69 f7       	brne	.-38     	; 0x203c <Ultrasonic+0x13e>
    2062:	24 c0       	rjmp	.+72     	; 0x20ac <Ultrasonic+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	68 85       	ldd	r22, Y+8	; 0x08
    2066:	79 85       	ldd	r23, Y+9	; 0x09
    2068:	8a 85       	ldd	r24, Y+10	; 0x0a
    206a:	9b 85       	ldd	r25, Y+11	; 0x0b
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9f 83       	std	Y+7, r25	; 0x07
    2076:	8e 83       	std	Y+6, r24	; 0x06
    2078:	8e 81       	ldd	r24, Y+6	; 0x06
    207a:	9f 81       	ldd	r25, Y+7	; 0x07
    207c:	9b 83       	std	Y+3, r25	; 0x03
    207e:	8a 83       	std	Y+2, r24	; 0x02
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	9b 81       	ldd	r25, Y+3	; 0x03
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <Ultrasonic+0x186>
    2088:	9b 83       	std	Y+3, r25	; 0x03
    208a:	8a 83       	std	Y+2, r24	; 0x02
    208c:	0f c0       	rjmp	.+30     	; 0x20ac <Ultrasonic+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    208e:	69 89       	ldd	r22, Y+17	; 0x11
    2090:	7a 89       	ldd	r23, Y+18	; 0x12
    2092:	8b 89       	ldd	r24, Y+19	; 0x13
    2094:	9c 89       	ldd	r25, Y+20	; 0x14
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	88 8b       	std	Y+16, r24	; 0x10
    20a0:	88 89       	ldd	r24, Y+16	; 0x10
    20a2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	8a 95       	dec	r24
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <Ultrasonic+0x1a8>
    20aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	CLEAR_BIT(DDRA,ECHO);//ECHO PA1 as input
    20ac:	aa e3       	ldi	r26, 0x3A	; 58
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	ea e3       	ldi	r30, 0x3A	; 58
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	8b 7f       	andi	r24, 0xFB	; 251
    20b8:	8c 93       	st	X, r24
	TIMER0_Init(normalMode, normalPort, Prescalar_64, 255, overflow);
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	43 e0       	ldi	r20, 0x03	; 3
    20c0:	2f ef       	ldi	r18, 0xFF	; 255
    20c2:	01 e0       	ldi	r16, 0x01	; 1
    20c4:	0e 94 5d 06 	call	0xcba	; 0xcba <TIMER0_Init>
    if(READ_BIT(PORTA,ECHO) == LOW)         //low= pulse ended
    20c8:	eb e3       	ldi	r30, 0x3B	; 59
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	86 95       	lsr	r24
    20d0:	86 95       	lsr	r24
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	81 70       	andi	r24, 0x01	; 1
    20d8:	90 70       	andi	r25, 0x00	; 0
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	81 f4       	brne	.+32     	; 0x20fe <Ultrasonic+0x200>
    {
        u8 time = TCNT0;           //time completed
    20de:	e2 e5       	ldi	r30, 0x52	; 82
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	89 8f       	std	Y+25, r24	; 0x19
        distance = time/58;     //distance completed
    20e6:	89 8d       	ldd	r24, Y+25	; 0x19
    20e8:	9a e3       	ldi	r25, 0x3A	; 58
    20ea:	69 2f       	mov	r22, r25
    20ec:	0e 94 43 1a 	call	0x3486	; 0x3486 <__udivmodqi4>
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9b 8f       	std	Y+27, r25	; 0x1b
    20f6:	8a 8f       	std	Y+26, r24	; 0x1a
        TCNT0 = 0;        		//reset timer
    20f8:	e2 e5       	ldi	r30, 0x52	; 82
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	10 82       	st	Z, r1
    }

	return distance;
    20fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2100:	9b 8d       	ldd	r25, Y+27	; 0x1b
}
    2102:	6b 96       	adiw	r28, 0x1b	; 27
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	0f 91       	pop	r16
    2114:	08 95       	ret

00002116 <LCD_vInit>:
#include "LCD_CFG.h"
#include "LCD.h"
#include "avr/delay.h"

//LCD Initialization
void LCD_vInit(void){
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	e8 97       	sbiw	r28, 0x38	; 56
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
	
	SetGroupDir(LCD_DATA_PORT,0xFF);
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	6f ef       	ldi	r22, 0xFF	; 255
    212e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <SetGroupDir>
	SetPinDir(LCD_CTRL_PORT,RS_PIN,OUTPUT);
    2132:	83 e0       	ldi	r24, 0x03	; 3
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	41 e0       	ldi	r20, 0x01	; 1
    2138:	0e 94 9f 0a 	call	0x153e	; 0x153e <SetPinDir>
	SetPinDir(LCD_CTRL_PORT,RW_PIN,OUTPUT);
    213c:	83 e0       	ldi	r24, 0x03	; 3
    213e:	61 e0       	ldi	r22, 0x01	; 1
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	0e 94 9f 0a 	call	0x153e	; 0x153e <SetPinDir>
	SetPinDir(LCD_CTRL_PORT,EN_PIN,OUTPUT);
    2146:	83 e0       	ldi	r24, 0x03	; 3
    2148:	62 e0       	ldi	r22, 0x02	; 2
    214a:	41 e0       	ldi	r20, 0x01	; 1
    214c:	0e 94 9f 0a 	call	0x153e	; 0x153e <SetPinDir>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a8 e4       	ldi	r26, 0x48	; 72
    2156:	b2 e4       	ldi	r27, 0x42	; 66
    2158:	8d ab       	std	Y+53, r24	; 0x35
    215a:	9e ab       	std	Y+54, r25	; 0x36
    215c:	af ab       	std	Y+55, r26	; 0x37
    215e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2160:	6d a9       	ldd	r22, Y+53	; 0x35
    2162:	7e a9       	ldd	r23, Y+54	; 0x36
    2164:	8f a9       	ldd	r24, Y+55	; 0x37
    2166:	98 ad       	ldd	r25, Y+56	; 0x38
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a ef       	ldi	r20, 0xFA	; 250
    216e:	54 e4       	ldi	r21, 0x44	; 68
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	89 ab       	std	Y+49, r24	; 0x31
    217a:	9a ab       	std	Y+50, r25	; 0x32
    217c:	ab ab       	std	Y+51, r26	; 0x33
    217e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2180:	69 a9       	ldd	r22, Y+49	; 0x31
    2182:	7a a9       	ldd	r23, Y+50	; 0x32
    2184:	8b a9       	ldd	r24, Y+51	; 0x33
    2186:	9c a9       	ldd	r25, Y+52	; 0x34
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <LCD_vInit+0x8c>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	98 ab       	std	Y+48, r25	; 0x30
    219e:	8f a7       	std	Y+47, r24	; 0x2f
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <LCD_vInit+0x10a>
	else if (__tmp > 65535)
    21a2:	69 a9       	ldd	r22, Y+49	; 0x31
    21a4:	7a a9       	ldd	r23, Y+50	; 0x32
    21a6:	8b a9       	ldd	r24, Y+51	; 0x33
    21a8:	9c a9       	ldd	r25, Y+52	; 0x34
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <LCD_vInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	6d a9       	ldd	r22, Y+53	; 0x35
    21bc:	7e a9       	ldd	r23, Y+54	; 0x36
    21be:	8f a9       	ldd	r24, Y+55	; 0x37
    21c0:	98 ad       	ldd	r25, Y+56	; 0x38
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	98 ab       	std	Y+48, r25	; 0x30
    21e0:	8f a7       	std	Y+47, r24	; 0x2f
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <LCD_vInit+0xec>
    21e4:	88 ec       	ldi	r24, 0xC8	; 200
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9e a7       	std	Y+46, r25	; 0x2e
    21ea:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_vInit+0xda>
    21f4:	9e a7       	std	Y+46, r25	; 0x2e
    21f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21fa:	98 a9       	ldd	r25, Y+48	; 0x30
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	98 ab       	std	Y+48, r25	; 0x30
    2200:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	8f a5       	ldd	r24, Y+47	; 0x2f
    2204:	98 a9       	ldd	r25, Y+48	; 0x30
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	69 f7       	brne	.-38     	; 0x21e4 <LCD_vInit+0xce>
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <LCD_vInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	69 a9       	ldd	r22, Y+49	; 0x31
    220e:	7a a9       	ldd	r23, Y+50	; 0x32
    2210:	8b a9       	ldd	r24, Y+51	; 0x33
    2212:	9c a9       	ldd	r25, Y+52	; 0x34
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	98 ab       	std	Y+48, r25	; 0x30
    221e:	8f a7       	std	Y+47, r24	; 0x2f
    2220:	8f a5       	ldd	r24, Y+47	; 0x2f
    2222:	98 a9       	ldd	r25, Y+48	; 0x30
    2224:	9c a7       	std	Y+44, r25	; 0x2c
    2226:	8b a7       	std	Y+43, r24	; 0x2b
    2228:	8b a5       	ldd	r24, Y+43	; 0x2b
    222a:	9c a5       	ldd	r25, Y+44	; 0x2c
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_vInit+0x116>
    2230:	9c a7       	std	Y+44, r25	; 0x2c
    2232:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_vSendCMD(TWO_LINE_LCD_EIGHT_BIT_MODE);
    2234:	88 e3       	ldi	r24, 0x38	; 56
    2236:	0e 94 82 12 	call	0x2504	; 0x2504 <LCD_vSendCMD>
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a8 e4       	ldi	r26, 0x48	; 72
    2240:	b2 e4       	ldi	r27, 0x42	; 66
    2242:	8f a3       	std	Y+39, r24	; 0x27
    2244:	98 a7       	std	Y+40, r25	; 0x28
    2246:	a9 a7       	std	Y+41, r26	; 0x29
    2248:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	6f a1       	ldd	r22, Y+39	; 0x27
    224c:	78 a5       	ldd	r23, Y+40	; 0x28
    224e:	89 a5       	ldd	r24, Y+41	; 0x29
    2250:	9a a5       	ldd	r25, Y+42	; 0x2a
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a ef       	ldi	r20, 0xFA	; 250
    2258:	54 e4       	ldi	r21, 0x44	; 68
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8b a3       	std	Y+35, r24	; 0x23
    2264:	9c a3       	std	Y+36, r25	; 0x24
    2266:	ad a3       	std	Y+37, r26	; 0x25
    2268:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    226a:	6b a1       	ldd	r22, Y+35	; 0x23
    226c:	7c a1       	ldd	r23, Y+36	; 0x24
    226e:	8d a1       	ldd	r24, Y+37	; 0x25
    2270:	9e a1       	ldd	r25, Y+38	; 0x26
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    227e:	88 23       	and	r24, r24
    2280:	2c f4       	brge	.+10     	; 0x228c <LCD_vInit+0x176>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9a a3       	std	Y+34, r25	; 0x22
    2288:	89 a3       	std	Y+33, r24	; 0x21
    228a:	3f c0       	rjmp	.+126    	; 0x230a <LCD_vInit+0x1f4>
	else if (__tmp > 65535)
    228c:	6b a1       	ldd	r22, Y+35	; 0x23
    228e:	7c a1       	ldd	r23, Y+36	; 0x24
    2290:	8d a1       	ldd	r24, Y+37	; 0x25
    2292:	9e a1       	ldd	r25, Y+38	; 0x26
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <LCD_vInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a4:	6f a1       	ldd	r22, Y+39	; 0x27
    22a6:	78 a5       	ldd	r23, Y+40	; 0x28
    22a8:	89 a5       	ldd	r24, Y+41	; 0x29
    22aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	51 e4       	ldi	r21, 0x41	; 65
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9a a3       	std	Y+34, r25	; 0x22
    22ca:	89 a3       	std	Y+33, r24	; 0x21
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <LCD_vInit+0x1d6>
    22ce:	88 ec       	ldi	r24, 0xC8	; 200
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	98 a3       	std	Y+32, r25	; 0x20
    22d4:	8f 8f       	std	Y+31, r24	; 0x1f
    22d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d8:	98 a1       	ldd	r25, Y+32	; 0x20
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_vInit+0x1c4>
    22de:	98 a3       	std	Y+32, r25	; 0x20
    22e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	89 a1       	ldd	r24, Y+33	; 0x21
    22e4:	9a a1       	ldd	r25, Y+34	; 0x22
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9a a3       	std	Y+34, r25	; 0x22
    22ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	89 a1       	ldd	r24, Y+33	; 0x21
    22ee:	9a a1       	ldd	r25, Y+34	; 0x22
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	69 f7       	brne	.-38     	; 0x22ce <LCD_vInit+0x1b8>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <LCD_vInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f6:	6b a1       	ldd	r22, Y+35	; 0x23
    22f8:	7c a1       	ldd	r23, Y+36	; 0x24
    22fa:	8d a1       	ldd	r24, Y+37	; 0x25
    22fc:	9e a1       	ldd	r25, Y+38	; 0x26
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9a a3       	std	Y+34, r25	; 0x22
    2308:	89 a3       	std	Y+33, r24	; 0x21
    230a:	89 a1       	ldd	r24, Y+33	; 0x21
    230c:	9a a1       	ldd	r25, Y+34	; 0x22
    230e:	9e 8f       	std	Y+30, r25	; 0x1e
    2310:	8d 8f       	std	Y+29, r24	; 0x1d
    2312:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2314:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <LCD_vInit+0x200>
    231a:	9e 8f       	std	Y+30, r25	; 0x1e
    231c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	LCD_vSendCMD(CURSOR_ON);
    231e:	8f e0       	ldi	r24, 0x0F	; 15
    2320:	0e 94 82 12 	call	0x2504	; 0x2504 <LCD_vSendCMD>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a8 e4       	ldi	r26, 0x48	; 72
    232a:	b2 e4       	ldi	r27, 0x42	; 66
    232c:	89 8f       	std	Y+25, r24	; 0x19
    232e:	9a 8f       	std	Y+26, r25	; 0x1a
    2330:	ab 8f       	std	Y+27, r26	; 0x1b
    2332:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2334:	69 8d       	ldd	r22, Y+25	; 0x19
    2336:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2338:	8b 8d       	ldd	r24, Y+27	; 0x1b
    233a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4a ef       	ldi	r20, 0xFA	; 250
    2342:	54 e4       	ldi	r21, 0x44	; 68
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	8d 8b       	std	Y+21, r24	; 0x15
    234e:	9e 8b       	std	Y+22, r25	; 0x16
    2350:	af 8b       	std	Y+23, r26	; 0x17
    2352:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2354:	6d 89       	ldd	r22, Y+21	; 0x15
    2356:	7e 89       	ldd	r23, Y+22	; 0x16
    2358:	8f 89       	ldd	r24, Y+23	; 0x17
    235a:	98 8d       	ldd	r25, Y+24	; 0x18
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e8       	ldi	r20, 0x80	; 128
    2362:	5f e3       	ldi	r21, 0x3F	; 63
    2364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2368:	88 23       	and	r24, r24
    236a:	2c f4       	brge	.+10     	; 0x2376 <LCD_vInit+0x260>
		__ticks = 1;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9c 8b       	std	Y+20, r25	; 0x14
    2372:	8b 8b       	std	Y+19, r24	; 0x13
    2374:	3f c0       	rjmp	.+126    	; 0x23f4 <LCD_vInit+0x2de>
	else if (__tmp > 65535)
    2376:	6d 89       	ldd	r22, Y+21	; 0x15
    2378:	7e 89       	ldd	r23, Y+22	; 0x16
    237a:	8f 89       	ldd	r24, Y+23	; 0x17
    237c:	98 8d       	ldd	r25, Y+24	; 0x18
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	3f ef       	ldi	r19, 0xFF	; 255
    2382:	4f e7       	ldi	r20, 0x7F	; 127
    2384:	57 e4       	ldi	r21, 0x47	; 71
    2386:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    238a:	18 16       	cp	r1, r24
    238c:	4c f5       	brge	.+82     	; 0x23e0 <LCD_vInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238e:	69 8d       	ldd	r22, Y+25	; 0x19
    2390:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2394:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e2       	ldi	r20, 0x20	; 32
    239c:	51 e4       	ldi	r21, 0x41	; 65
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9c 8b       	std	Y+20, r25	; 0x14
    23b4:	8b 8b       	std	Y+19, r24	; 0x13
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <LCD_vInit+0x2c0>
    23b8:	88 ec       	ldi	r24, 0xC8	; 200
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9a 8b       	std	Y+18, r25	; 0x12
    23be:	89 8b       	std	Y+17, r24	; 0x11
    23c0:	89 89       	ldd	r24, Y+17	; 0x11
    23c2:	9a 89       	ldd	r25, Y+18	; 0x12
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <LCD_vInit+0x2ae>
    23c8:	9a 8b       	std	Y+18, r25	; 0x12
    23ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23cc:	8b 89       	ldd	r24, Y+19	; 0x13
    23ce:	9c 89       	ldd	r25, Y+20	; 0x14
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	9c 8b       	std	Y+20, r25	; 0x14
    23d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	8b 89       	ldd	r24, Y+19	; 0x13
    23d8:	9c 89       	ldd	r25, Y+20	; 0x14
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	69 f7       	brne	.-38     	; 0x23b8 <LCD_vInit+0x2a2>
    23de:	14 c0       	rjmp	.+40     	; 0x2408 <LCD_vInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9c 8b       	std	Y+20, r25	; 0x14
    23f2:	8b 8b       	std	Y+19, r24	; 0x13
    23f4:	8b 89       	ldd	r24, Y+19	; 0x13
    23f6:	9c 89       	ldd	r25, Y+20	; 0x14
    23f8:	98 8b       	std	Y+16, r25	; 0x10
    23fa:	8f 87       	std	Y+15, r24	; 0x0f
    23fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fe:	98 89       	ldd	r25, Y+16	; 0x10
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <LCD_vInit+0x2ea>
    2404:	98 8b       	std	Y+16, r25	; 0x10
    2406:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_vSendCMD(CLEAR_COMMAND);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	0e 94 82 12 	call	0x2504	; 0x2504 <LCD_vSendCMD>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a8 e4       	ldi	r26, 0x48	; 72
    2414:	b2 e4       	ldi	r27, 0x42	; 66
    2416:	8b 87       	std	Y+11, r24	; 0x0b
    2418:	9c 87       	std	Y+12, r25	; 0x0c
    241a:	ad 87       	std	Y+13, r26	; 0x0d
    241c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2420:	7c 85       	ldd	r23, Y+12	; 0x0c
    2422:	8d 85       	ldd	r24, Y+13	; 0x0d
    2424:	9e 85       	ldd	r25, Y+14	; 0x0e
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	4a ef       	ldi	r20, 0xFA	; 250
    242c:	54 e4       	ldi	r21, 0x44	; 68
    242e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	8f 83       	std	Y+7, r24	; 0x07
    2438:	98 87       	std	Y+8, r25	; 0x08
    243a:	a9 87       	std	Y+9, r26	; 0x09
    243c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    243e:	6f 81       	ldd	r22, Y+7	; 0x07
    2440:	78 85       	ldd	r23, Y+8	; 0x08
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	9a 85       	ldd	r25, Y+10	; 0x0a
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e8       	ldi	r20, 0x80	; 128
    244c:	5f e3       	ldi	r21, 0x3F	; 63
    244e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2452:	88 23       	and	r24, r24
    2454:	2c f4       	brge	.+10     	; 0x2460 <LCD_vInit+0x34a>
		__ticks = 1;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9e 83       	std	Y+6, r25	; 0x06
    245c:	8d 83       	std	Y+5, r24	; 0x05
    245e:	3f c0       	rjmp	.+126    	; 0x24de <LCD_vInit+0x3c8>
	else if (__tmp > 65535)
    2460:	6f 81       	ldd	r22, Y+7	; 0x07
    2462:	78 85       	ldd	r23, Y+8	; 0x08
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	57 e4       	ldi	r21, 0x47	; 71
    2470:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	4c f5       	brge	.+82     	; 0x24ca <LCD_vInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2478:	6b 85       	ldd	r22, Y+11	; 0x0b
    247a:	7c 85       	ldd	r23, Y+12	; 0x0c
    247c:	8d 85       	ldd	r24, Y+13	; 0x0d
    247e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e2       	ldi	r20, 0x20	; 32
    2486:	51 e4       	ldi	r21, 0x41	; 65
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9e 83       	std	Y+6, r25	; 0x06
    249e:	8d 83       	std	Y+5, r24	; 0x05
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <LCD_vInit+0x3aa>
    24a2:	88 ec       	ldi	r24, 0xC8	; 200
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9c 83       	std	Y+4, r25	; 0x04
    24a8:	8b 83       	std	Y+3, r24	; 0x03
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	9c 81       	ldd	r25, Y+4	; 0x04
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <LCD_vInit+0x398>
    24b2:	9c 83       	std	Y+4, r25	; 0x04
    24b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b6:	8d 81       	ldd	r24, Y+5	; 0x05
    24b8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	9e 83       	std	Y+6, r25	; 0x06
    24be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	69 f7       	brne	.-38     	; 0x24a2 <LCD_vInit+0x38c>
    24c8:	14 c0       	rjmp	.+40     	; 0x24f2 <LCD_vInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9e 83       	std	Y+6, r25	; 0x06
    24dc:	8d 83       	std	Y+5, r24	; 0x05
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	9e 81       	ldd	r25, Y+6	; 0x06
    24e2:	9a 83       	std	Y+2, r25	; 0x02
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <LCD_vInit+0x3d4>
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	
}
    24f2:	e8 96       	adiw	r28, 0x38	; 56
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <LCD_vSendCMD>:

//Sending Commands
void LCD_vSendCMD(u8 cmd){
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	e9 97       	sbiw	r28, 0x39	; 57
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	89 af       	std	Y+57, r24	; 0x39
	
	SetPinValue(LCD_CTRL_PORT,RS_PIN,LOW);
    251a:	83 e0       	ldi	r24, 0x03	; 3
    251c:	60 e0       	ldi	r22, 0x00	; 0
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
	SetPinValue(LCD_CTRL_PORT,RW_PIN,LOW);
    2524:	83 e0       	ldi	r24, 0x03	; 3
    2526:	61 e0       	ldi	r22, 0x01	; 1
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
	SetPinValue(LCD_CTRL_PORT,EN_PIN,LOW);
    252e:	83 e0       	ldi	r24, 0x03	; 3
    2530:	62 e0       	ldi	r22, 0x02	; 2
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	a8 e4       	ldi	r26, 0x48	; 72
    253e:	b2 e4       	ldi	r27, 0x42	; 66
    2540:	8d ab       	std	Y+53, r24	; 0x35
    2542:	9e ab       	std	Y+54, r25	; 0x36
    2544:	af ab       	std	Y+55, r26	; 0x37
    2546:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2548:	6d a9       	ldd	r22, Y+53	; 0x35
    254a:	7e a9       	ldd	r23, Y+54	; 0x36
    254c:	8f a9       	ldd	r24, Y+55	; 0x37
    254e:	98 ad       	ldd	r25, Y+56	; 0x38
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	4a ef       	ldi	r20, 0xFA	; 250
    2556:	54 e4       	ldi	r21, 0x44	; 68
    2558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	89 ab       	std	Y+49, r24	; 0x31
    2562:	9a ab       	std	Y+50, r25	; 0x32
    2564:	ab ab       	std	Y+51, r26	; 0x33
    2566:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2568:	69 a9       	ldd	r22, Y+49	; 0x31
    256a:	7a a9       	ldd	r23, Y+50	; 0x32
    256c:	8b a9       	ldd	r24, Y+51	; 0x33
    256e:	9c a9       	ldd	r25, Y+52	; 0x34
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e8       	ldi	r20, 0x80	; 128
    2576:	5f e3       	ldi	r21, 0x3F	; 63
    2578:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    257c:	88 23       	and	r24, r24
    257e:	2c f4       	brge	.+10     	; 0x258a <LCD_vSendCMD+0x86>
		__ticks = 1;
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	98 ab       	std	Y+48, r25	; 0x30
    2586:	8f a7       	std	Y+47, r24	; 0x2f
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <LCD_vSendCMD+0x104>
	else if (__tmp > 65535)
    258a:	69 a9       	ldd	r22, Y+49	; 0x31
    258c:	7a a9       	ldd	r23, Y+50	; 0x32
    258e:	8b a9       	ldd	r24, Y+51	; 0x33
    2590:	9c a9       	ldd	r25, Y+52	; 0x34
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	3f ef       	ldi	r19, 0xFF	; 255
    2596:	4f e7       	ldi	r20, 0x7F	; 127
    2598:	57 e4       	ldi	r21, 0x47	; 71
    259a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    259e:	18 16       	cp	r1, r24
    25a0:	4c f5       	brge	.+82     	; 0x25f4 <LCD_vSendCMD+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a2:	6d a9       	ldd	r22, Y+53	; 0x35
    25a4:	7e a9       	ldd	r23, Y+54	; 0x36
    25a6:	8f a9       	ldd	r24, Y+55	; 0x37
    25a8:	98 ad       	ldd	r25, Y+56	; 0x38
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e2       	ldi	r20, 0x20	; 32
    25b0:	51 e4       	ldi	r21, 0x41	; 65
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	98 ab       	std	Y+48, r25	; 0x30
    25c8:	8f a7       	std	Y+47, r24	; 0x2f
    25ca:	0f c0       	rjmp	.+30     	; 0x25ea <LCD_vSendCMD+0xe6>
    25cc:	88 ec       	ldi	r24, 0xC8	; 200
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9e a7       	std	Y+46, r25	; 0x2e
    25d2:	8d a7       	std	Y+45, r24	; 0x2d
    25d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    25d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <LCD_vSendCMD+0xd4>
    25dc:	9e a7       	std	Y+46, r25	; 0x2e
    25de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e2:	98 a9       	ldd	r25, Y+48	; 0x30
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	98 ab       	std	Y+48, r25	; 0x30
    25e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ec:	98 a9       	ldd	r25, Y+48	; 0x30
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	69 f7       	brne	.-38     	; 0x25cc <LCD_vSendCMD+0xc8>
    25f2:	14 c0       	rjmp	.+40     	; 0x261c <LCD_vSendCMD+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f4:	69 a9       	ldd	r22, Y+49	; 0x31
    25f6:	7a a9       	ldd	r23, Y+50	; 0x32
    25f8:	8b a9       	ldd	r24, Y+51	; 0x33
    25fa:	9c a9       	ldd	r25, Y+52	; 0x34
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	98 ab       	std	Y+48, r25	; 0x30
    2606:	8f a7       	std	Y+47, r24	; 0x2f
    2608:	8f a5       	ldd	r24, Y+47	; 0x2f
    260a:	98 a9       	ldd	r25, Y+48	; 0x30
    260c:	9c a7       	std	Y+44, r25	; 0x2c
    260e:	8b a7       	std	Y+43, r24	; 0x2b
    2610:	8b a5       	ldd	r24, Y+43	; 0x2b
    2612:	9c a5       	ldd	r25, Y+44	; 0x2c
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <LCD_vSendCMD+0x110>
    2618:	9c a7       	std	Y+44, r25	; 0x2c
    261a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	SetPinValue(LCD_CTRL_PORT,EN_PIN,HIGH);
    261c:	83 e0       	ldi	r24, 0x03	; 3
    261e:	62 e0       	ldi	r22, 0x02	; 2
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	a8 e4       	ldi	r26, 0x48	; 72
    262c:	b2 e4       	ldi	r27, 0x42	; 66
    262e:	8f a3       	std	Y+39, r24	; 0x27
    2630:	98 a7       	std	Y+40, r25	; 0x28
    2632:	a9 a7       	std	Y+41, r26	; 0x29
    2634:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2636:	6f a1       	ldd	r22, Y+39	; 0x27
    2638:	78 a5       	ldd	r23, Y+40	; 0x28
    263a:	89 a5       	ldd	r24, Y+41	; 0x29
    263c:	9a a5       	ldd	r25, Y+42	; 0x2a
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	4a ef       	ldi	r20, 0xFA	; 250
    2644:	54 e4       	ldi	r21, 0x44	; 68
    2646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	8b a3       	std	Y+35, r24	; 0x23
    2650:	9c a3       	std	Y+36, r25	; 0x24
    2652:	ad a3       	std	Y+37, r26	; 0x25
    2654:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2656:	6b a1       	ldd	r22, Y+35	; 0x23
    2658:	7c a1       	ldd	r23, Y+36	; 0x24
    265a:	8d a1       	ldd	r24, Y+37	; 0x25
    265c:	9e a1       	ldd	r25, Y+38	; 0x26
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e8       	ldi	r20, 0x80	; 128
    2664:	5f e3       	ldi	r21, 0x3F	; 63
    2666:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    266a:	88 23       	and	r24, r24
    266c:	2c f4       	brge	.+10     	; 0x2678 <LCD_vSendCMD+0x174>
		__ticks = 1;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	9a a3       	std	Y+34, r25	; 0x22
    2674:	89 a3       	std	Y+33, r24	; 0x21
    2676:	3f c0       	rjmp	.+126    	; 0x26f6 <LCD_vSendCMD+0x1f2>
	else if (__tmp > 65535)
    2678:	6b a1       	ldd	r22, Y+35	; 0x23
    267a:	7c a1       	ldd	r23, Y+36	; 0x24
    267c:	8d a1       	ldd	r24, Y+37	; 0x25
    267e:	9e a1       	ldd	r25, Y+38	; 0x26
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	3f ef       	ldi	r19, 0xFF	; 255
    2684:	4f e7       	ldi	r20, 0x7F	; 127
    2686:	57 e4       	ldi	r21, 0x47	; 71
    2688:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    268c:	18 16       	cp	r1, r24
    268e:	4c f5       	brge	.+82     	; 0x26e2 <LCD_vSendCMD+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2690:	6f a1       	ldd	r22, Y+39	; 0x27
    2692:	78 a5       	ldd	r23, Y+40	; 0x28
    2694:	89 a5       	ldd	r24, Y+41	; 0x29
    2696:	9a a5       	ldd	r25, Y+42	; 0x2a
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e2       	ldi	r20, 0x20	; 32
    269e:	51 e4       	ldi	r21, 0x41	; 65
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	bc 01       	movw	r22, r24
    26aa:	cd 01       	movw	r24, r26
    26ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	9a a3       	std	Y+34, r25	; 0x22
    26b6:	89 a3       	std	Y+33, r24	; 0x21
    26b8:	0f c0       	rjmp	.+30     	; 0x26d8 <LCD_vSendCMD+0x1d4>
    26ba:	88 ec       	ldi	r24, 0xC8	; 200
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	98 a3       	std	Y+32, r25	; 0x20
    26c0:	8f 8f       	std	Y+31, r24	; 0x1f
    26c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26c4:	98 a1       	ldd	r25, Y+32	; 0x20
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <LCD_vSendCMD+0x1c2>
    26ca:	98 a3       	std	Y+32, r25	; 0x20
    26cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ce:	89 a1       	ldd	r24, Y+33	; 0x21
    26d0:	9a a1       	ldd	r25, Y+34	; 0x22
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	9a a3       	std	Y+34, r25	; 0x22
    26d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d8:	89 a1       	ldd	r24, Y+33	; 0x21
    26da:	9a a1       	ldd	r25, Y+34	; 0x22
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	69 f7       	brne	.-38     	; 0x26ba <LCD_vSendCMD+0x1b6>
    26e0:	14 c0       	rjmp	.+40     	; 0x270a <LCD_vSendCMD+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e2:	6b a1       	ldd	r22, Y+35	; 0x23
    26e4:	7c a1       	ldd	r23, Y+36	; 0x24
    26e6:	8d a1       	ldd	r24, Y+37	; 0x25
    26e8:	9e a1       	ldd	r25, Y+38	; 0x26
    26ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	9a a3       	std	Y+34, r25	; 0x22
    26f4:	89 a3       	std	Y+33, r24	; 0x21
    26f6:	89 a1       	ldd	r24, Y+33	; 0x21
    26f8:	9a a1       	ldd	r25, Y+34	; 0x22
    26fa:	9e 8f       	std	Y+30, r25	; 0x1e
    26fc:	8d 8f       	std	Y+29, r24	; 0x1d
    26fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2700:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <LCD_vSendCMD+0x1fe>
    2706:	9e 8f       	std	Y+30, r25	; 0x1e
    2708:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	SetGroupValue(LCD_DATA_PORT,cmd);
    270a:	82 e0       	ldi	r24, 0x02	; 2
    270c:	69 ad       	ldd	r22, Y+57	; 0x39
    270e:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <SetGroupValue>
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	a8 e4       	ldi	r26, 0x48	; 72
    2718:	b2 e4       	ldi	r27, 0x42	; 66
    271a:	89 8f       	std	Y+25, r24	; 0x19
    271c:	9a 8f       	std	Y+26, r25	; 0x1a
    271e:	ab 8f       	std	Y+27, r26	; 0x1b
    2720:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2722:	69 8d       	ldd	r22, Y+25	; 0x19
    2724:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2726:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2728:	9c 8d       	ldd	r25, Y+28	; 0x1c
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	4a ef       	ldi	r20, 0xFA	; 250
    2730:	54 e4       	ldi	r21, 0x44	; 68
    2732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	8d 8b       	std	Y+21, r24	; 0x15
    273c:	9e 8b       	std	Y+22, r25	; 0x16
    273e:	af 8b       	std	Y+23, r26	; 0x17
    2740:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2742:	6d 89       	ldd	r22, Y+21	; 0x15
    2744:	7e 89       	ldd	r23, Y+22	; 0x16
    2746:	8f 89       	ldd	r24, Y+23	; 0x17
    2748:	98 8d       	ldd	r25, Y+24	; 0x18
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e8       	ldi	r20, 0x80	; 128
    2750:	5f e3       	ldi	r21, 0x3F	; 63
    2752:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2756:	88 23       	and	r24, r24
    2758:	2c f4       	brge	.+10     	; 0x2764 <LCD_vSendCMD+0x260>
		__ticks = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9c 8b       	std	Y+20, r25	; 0x14
    2760:	8b 8b       	std	Y+19, r24	; 0x13
    2762:	3f c0       	rjmp	.+126    	; 0x27e2 <LCD_vSendCMD+0x2de>
	else if (__tmp > 65535)
    2764:	6d 89       	ldd	r22, Y+21	; 0x15
    2766:	7e 89       	ldd	r23, Y+22	; 0x16
    2768:	8f 89       	ldd	r24, Y+23	; 0x17
    276a:	98 8d       	ldd	r25, Y+24	; 0x18
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	3f ef       	ldi	r19, 0xFF	; 255
    2770:	4f e7       	ldi	r20, 0x7F	; 127
    2772:	57 e4       	ldi	r21, 0x47	; 71
    2774:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2778:	18 16       	cp	r1, r24
    277a:	4c f5       	brge	.+82     	; 0x27ce <LCD_vSendCMD+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277c:	69 8d       	ldd	r22, Y+25	; 0x19
    277e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2780:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2782:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	51 e4       	ldi	r21, 0x41	; 65
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9c 8b       	std	Y+20, r25	; 0x14
    27a2:	8b 8b       	std	Y+19, r24	; 0x13
    27a4:	0f c0       	rjmp	.+30     	; 0x27c4 <LCD_vSendCMD+0x2c0>
    27a6:	88 ec       	ldi	r24, 0xC8	; 200
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	9a 8b       	std	Y+18, r25	; 0x12
    27ac:	89 8b       	std	Y+17, r24	; 0x11
    27ae:	89 89       	ldd	r24, Y+17	; 0x11
    27b0:	9a 89       	ldd	r25, Y+18	; 0x12
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <LCD_vSendCMD+0x2ae>
    27b6:	9a 8b       	std	Y+18, r25	; 0x12
    27b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ba:	8b 89       	ldd	r24, Y+19	; 0x13
    27bc:	9c 89       	ldd	r25, Y+20	; 0x14
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	9c 8b       	std	Y+20, r25	; 0x14
    27c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c4:	8b 89       	ldd	r24, Y+19	; 0x13
    27c6:	9c 89       	ldd	r25, Y+20	; 0x14
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	69 f7       	brne	.-38     	; 0x27a6 <LCD_vSendCMD+0x2a2>
    27cc:	14 c0       	rjmp	.+40     	; 0x27f6 <LCD_vSendCMD+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ce:	6d 89       	ldd	r22, Y+21	; 0x15
    27d0:	7e 89       	ldd	r23, Y+22	; 0x16
    27d2:	8f 89       	ldd	r24, Y+23	; 0x17
    27d4:	98 8d       	ldd	r25, Y+24	; 0x18
    27d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9c 8b       	std	Y+20, r25	; 0x14
    27e0:	8b 8b       	std	Y+19, r24	; 0x13
    27e2:	8b 89       	ldd	r24, Y+19	; 0x13
    27e4:	9c 89       	ldd	r25, Y+20	; 0x14
    27e6:	98 8b       	std	Y+16, r25	; 0x10
    27e8:	8f 87       	std	Y+15, r24	; 0x0f
    27ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ec:	98 89       	ldd	r25, Y+16	; 0x10
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <LCD_vSendCMD+0x2ea>
    27f2:	98 8b       	std	Y+16, r25	; 0x10
    27f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	SetPinValue(LCD_CTRL_PORT,EN_PIN,LOW);
    27f6:	83 e0       	ldi	r24, 0x03	; 3
    27f8:	62 e0       	ldi	r22, 0x02	; 2
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	a8 e4       	ldi	r26, 0x48	; 72
    2806:	b2 e4       	ldi	r27, 0x42	; 66
    2808:	8b 87       	std	Y+11, r24	; 0x0b
    280a:	9c 87       	std	Y+12, r25	; 0x0c
    280c:	ad 87       	std	Y+13, r26	; 0x0d
    280e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2810:	6b 85       	ldd	r22, Y+11	; 0x0b
    2812:	7c 85       	ldd	r23, Y+12	; 0x0c
    2814:	8d 85       	ldd	r24, Y+13	; 0x0d
    2816:	9e 85       	ldd	r25, Y+14	; 0x0e
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	4a ef       	ldi	r20, 0xFA	; 250
    281e:	54 e4       	ldi	r21, 0x44	; 68
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	8f 83       	std	Y+7, r24	; 0x07
    282a:	98 87       	std	Y+8, r25	; 0x08
    282c:	a9 87       	std	Y+9, r26	; 0x09
    282e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2830:	6f 81       	ldd	r22, Y+7	; 0x07
    2832:	78 85       	ldd	r23, Y+8	; 0x08
    2834:	89 85       	ldd	r24, Y+9	; 0x09
    2836:	9a 85       	ldd	r25, Y+10	; 0x0a
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	2c f4       	brge	.+10     	; 0x2852 <LCD_vSendCMD+0x34e>
		__ticks = 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9e 83       	std	Y+6, r25	; 0x06
    284e:	8d 83       	std	Y+5, r24	; 0x05
    2850:	3f c0       	rjmp	.+126    	; 0x28d0 <LCD_vSendCMD+0x3cc>
	else if (__tmp > 65535)
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	57 e4       	ldi	r21, 0x47	; 71
    2862:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	4c f5       	brge	.+82     	; 0x28bc <LCD_vSendCMD+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	6b 85       	ldd	r22, Y+11	; 0x0b
    286c:	7c 85       	ldd	r23, Y+12	; 0x0c
    286e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2870:	9e 85       	ldd	r25, Y+14	; 0x0e
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e2       	ldi	r20, 0x20	; 32
    2878:	51 e4       	ldi	r21, 0x41	; 65
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
    2892:	0f c0       	rjmp	.+30     	; 0x28b2 <LCD_vSendCMD+0x3ae>
    2894:	88 ec       	ldi	r24, 0xC8	; 200
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9c 83       	std	Y+4, r25	; 0x04
    289a:	8b 83       	std	Y+3, r24	; 0x03
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	9c 81       	ldd	r25, Y+4	; 0x04
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <LCD_vSendCMD+0x39c>
    28a4:	9c 83       	std	Y+4, r25	; 0x04
    28a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a8:	8d 81       	ldd	r24, Y+5	; 0x05
    28aa:	9e 81       	ldd	r25, Y+6	; 0x06
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	9e 83       	std	Y+6, r25	; 0x06
    28b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b2:	8d 81       	ldd	r24, Y+5	; 0x05
    28b4:	9e 81       	ldd	r25, Y+6	; 0x06
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	69 f7       	brne	.-38     	; 0x2894 <LCD_vSendCMD+0x390>
    28ba:	14 c0       	rjmp	.+40     	; 0x28e4 <LCD_vSendCMD+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28bc:	6f 81       	ldd	r22, Y+7	; 0x07
    28be:	78 85       	ldd	r23, Y+8	; 0x08
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9e 83       	std	Y+6, r25	; 0x06
    28ce:	8d 83       	std	Y+5, r24	; 0x05
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	9a 83       	std	Y+2, r25	; 0x02
    28d6:	89 83       	std	Y+1, r24	; 0x01
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <LCD_vSendCMD+0x3d8>
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
//	SetPinValue(LCD_CTRL_PORT,EN_PIN,HIGH);
//	_delay_ms(50);
	
}
    28e4:	e9 96       	adiw	r28, 0x39	; 57
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <LCD_vSendData>:

//Sending Data
void LCD_vSendData(u8 data){
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	e9 97       	sbiw	r28, 0x39	; 57
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	89 af       	std	Y+57, r24	; 0x39
	SetPinValue(LCD_CTRL_PORT,RS_PIN,HIGH);
    290c:	83 e0       	ldi	r24, 0x03	; 3
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
	SetPinValue(LCD_CTRL_PORT,RW_PIN,LOW);
    2916:	83 e0       	ldi	r24, 0x03	; 3
    2918:	61 e0       	ldi	r22, 0x01	; 1
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
	SetPinValue(LCD_CTRL_PORT,EN_PIN,LOW);
    2920:	83 e0       	ldi	r24, 0x03	; 3
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	a8 e4       	ldi	r26, 0x48	; 72
    2930:	b2 e4       	ldi	r27, 0x42	; 66
    2932:	8d ab       	std	Y+53, r24	; 0x35
    2934:	9e ab       	std	Y+54, r25	; 0x36
    2936:	af ab       	std	Y+55, r26	; 0x37
    2938:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293a:	6d a9       	ldd	r22, Y+53	; 0x35
    293c:	7e a9       	ldd	r23, Y+54	; 0x36
    293e:	8f a9       	ldd	r24, Y+55	; 0x37
    2940:	98 ad       	ldd	r25, Y+56	; 0x38
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	4a ef       	ldi	r20, 0xFA	; 250
    2948:	54 e4       	ldi	r21, 0x44	; 68
    294a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	89 ab       	std	Y+49, r24	; 0x31
    2954:	9a ab       	std	Y+50, r25	; 0x32
    2956:	ab ab       	std	Y+51, r26	; 0x33
    2958:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    295a:	69 a9       	ldd	r22, Y+49	; 0x31
    295c:	7a a9       	ldd	r23, Y+50	; 0x32
    295e:	8b a9       	ldd	r24, Y+51	; 0x33
    2960:	9c a9       	ldd	r25, Y+52	; 0x34
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e8       	ldi	r20, 0x80	; 128
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    296e:	88 23       	and	r24, r24
    2970:	2c f4       	brge	.+10     	; 0x297c <LCD_vSendData+0x86>
		__ticks = 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	98 ab       	std	Y+48, r25	; 0x30
    2978:	8f a7       	std	Y+47, r24	; 0x2f
    297a:	3f c0       	rjmp	.+126    	; 0x29fa <LCD_vSendData+0x104>
	else if (__tmp > 65535)
    297c:	69 a9       	ldd	r22, Y+49	; 0x31
    297e:	7a a9       	ldd	r23, Y+50	; 0x32
    2980:	8b a9       	ldd	r24, Y+51	; 0x33
    2982:	9c a9       	ldd	r25, Y+52	; 0x34
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	4f e7       	ldi	r20, 0x7F	; 127
    298a:	57 e4       	ldi	r21, 0x47	; 71
    298c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2990:	18 16       	cp	r1, r24
    2992:	4c f5       	brge	.+82     	; 0x29e6 <LCD_vSendData+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2994:	6d a9       	ldd	r22, Y+53	; 0x35
    2996:	7e a9       	ldd	r23, Y+54	; 0x36
    2998:	8f a9       	ldd	r24, Y+55	; 0x37
    299a:	98 ad       	ldd	r25, Y+56	; 0x38
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e2       	ldi	r20, 0x20	; 32
    29a2:	51 e4       	ldi	r21, 0x41	; 65
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	98 ab       	std	Y+48, r25	; 0x30
    29ba:	8f a7       	std	Y+47, r24	; 0x2f
    29bc:	0f c0       	rjmp	.+30     	; 0x29dc <LCD_vSendData+0xe6>
    29be:	88 ec       	ldi	r24, 0xC8	; 200
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	9e a7       	std	Y+46, r25	; 0x2e
    29c4:	8d a7       	std	Y+45, r24	; 0x2d
    29c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    29c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <LCD_vSendData+0xd4>
    29ce:	9e a7       	std	Y+46, r25	; 0x2e
    29d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d4:	98 a9       	ldd	r25, Y+48	; 0x30
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	98 ab       	std	Y+48, r25	; 0x30
    29da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29de:	98 a9       	ldd	r25, Y+48	; 0x30
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	69 f7       	brne	.-38     	; 0x29be <LCD_vSendData+0xc8>
    29e4:	14 c0       	rjmp	.+40     	; 0x2a0e <LCD_vSendData+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e6:	69 a9       	ldd	r22, Y+49	; 0x31
    29e8:	7a a9       	ldd	r23, Y+50	; 0x32
    29ea:	8b a9       	ldd	r24, Y+51	; 0x33
    29ec:	9c a9       	ldd	r25, Y+52	; 0x34
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	98 ab       	std	Y+48, r25	; 0x30
    29f8:	8f a7       	std	Y+47, r24	; 0x2f
    29fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fc:	98 a9       	ldd	r25, Y+48	; 0x30
    29fe:	9c a7       	std	Y+44, r25	; 0x2c
    2a00:	8b a7       	std	Y+43, r24	; 0x2b
    2a02:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a04:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <LCD_vSendData+0x110>
    2a0a:	9c a7       	std	Y+44, r25	; 0x2c
    2a0c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	SetPinValue(LCD_CTRL_PORT,EN_PIN,HIGH);
    2a0e:	83 e0       	ldi	r24, 0x03	; 3
    2a10:	62 e0       	ldi	r22, 0x02	; 2
    2a12:	41 e0       	ldi	r20, 0x01	; 1
    2a14:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	a8 e4       	ldi	r26, 0x48	; 72
    2a1e:	b2 e4       	ldi	r27, 0x42	; 66
    2a20:	8f a3       	std	Y+39, r24	; 0x27
    2a22:	98 a7       	std	Y+40, r25	; 0x28
    2a24:	a9 a7       	std	Y+41, r26	; 0x29
    2a26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a28:	6f a1       	ldd	r22, Y+39	; 0x27
    2a2a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a2c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	4a ef       	ldi	r20, 0xFA	; 250
    2a36:	54 e4       	ldi	r21, 0x44	; 68
    2a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	8b a3       	std	Y+35, r24	; 0x23
    2a42:	9c a3       	std	Y+36, r25	; 0x24
    2a44:	ad a3       	std	Y+37, r26	; 0x25
    2a46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a48:	6b a1       	ldd	r22, Y+35	; 0x23
    2a4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e8       	ldi	r20, 0x80	; 128
    2a56:	5f e3       	ldi	r21, 0x3F	; 63
    2a58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a5c:	88 23       	and	r24, r24
    2a5e:	2c f4       	brge	.+10     	; 0x2a6a <LCD_vSendData+0x174>
		__ticks = 1;
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9a a3       	std	Y+34, r25	; 0x22
    2a66:	89 a3       	std	Y+33, r24	; 0x21
    2a68:	3f c0       	rjmp	.+126    	; 0x2ae8 <LCD_vSendData+0x1f2>
	else if (__tmp > 65535)
    2a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a70:	9e a1       	ldd	r25, Y+38	; 0x26
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	4f e7       	ldi	r20, 0x7F	; 127
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	4c f5       	brge	.+82     	; 0x2ad4 <LCD_vSendData+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a82:	6f a1       	ldd	r22, Y+39	; 0x27
    2a84:	78 a5       	ldd	r23, Y+40	; 0x28
    2a86:	89 a5       	ldd	r24, Y+41	; 0x29
    2a88:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e2       	ldi	r20, 0x20	; 32
    2a90:	51 e4       	ldi	r21, 0x41	; 65
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	9a a3       	std	Y+34, r25	; 0x22
    2aa8:	89 a3       	std	Y+33, r24	; 0x21
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <LCD_vSendData+0x1d4>
    2aac:	88 ec       	ldi	r24, 0xC8	; 200
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	98 a3       	std	Y+32, r25	; 0x20
    2ab2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ab4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ab6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <LCD_vSendData+0x1c2>
    2abc:	98 a3       	std	Y+32, r25	; 0x20
    2abe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	9a a3       	std	Y+34, r25	; 0x22
    2ac8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aca:	89 a1       	ldd	r24, Y+33	; 0x21
    2acc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	69 f7       	brne	.-38     	; 0x2aac <LCD_vSendData+0x1b6>
    2ad2:	14 c0       	rjmp	.+40     	; 0x2afc <LCD_vSendData+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ad6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad8:	8d a1       	ldd	r24, Y+37	; 0x25
    2ada:	9e a1       	ldd	r25, Y+38	; 0x26
    2adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9a a3       	std	Y+34, r25	; 0x22
    2ae6:	89 a3       	std	Y+33, r24	; 0x21
    2ae8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aea:	9a a1       	ldd	r25, Y+34	; 0x22
    2aec:	9e 8f       	std	Y+30, r25	; 0x1e
    2aee:	8d 8f       	std	Y+29, r24	; 0x1d
    2af0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2af2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <LCD_vSendData+0x1fe>
    2af8:	9e 8f       	std	Y+30, r25	; 0x1e
    2afa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	SetGroupValue(LCD_DATA_PORT,data);
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	69 ad       	ldd	r22, Y+57	; 0x39
    2b00:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <SetGroupValue>
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	a8 e4       	ldi	r26, 0x48	; 72
    2b0a:	b2 e4       	ldi	r27, 0x42	; 66
    2b0c:	89 8f       	std	Y+25, r24	; 0x19
    2b0e:	9a 8f       	std	Y+26, r25	; 0x1a
    2b10:	ab 8f       	std	Y+27, r26	; 0x1b
    2b12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b14:	69 8d       	ldd	r22, Y+25	; 0x19
    2b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4a ef       	ldi	r20, 0xFA	; 250
    2b22:	54 e4       	ldi	r21, 0x44	; 68
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	8d 8b       	std	Y+21, r24	; 0x15
    2b2e:	9e 8b       	std	Y+22, r25	; 0x16
    2b30:	af 8b       	std	Y+23, r26	; 0x17
    2b32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b34:	6d 89       	ldd	r22, Y+21	; 0x15
    2b36:	7e 89       	ldd	r23, Y+22	; 0x16
    2b38:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e8       	ldi	r20, 0x80	; 128
    2b42:	5f e3       	ldi	r21, 0x3F	; 63
    2b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b48:	88 23       	and	r24, r24
    2b4a:	2c f4       	brge	.+10     	; 0x2b56 <LCD_vSendData+0x260>
		__ticks = 1;
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	9c 8b       	std	Y+20, r25	; 0x14
    2b52:	8b 8b       	std	Y+19, r24	; 0x13
    2b54:	3f c0       	rjmp	.+126    	; 0x2bd4 <LCD_vSendData+0x2de>
	else if (__tmp > 65535)
    2b56:	6d 89       	ldd	r22, Y+21	; 0x15
    2b58:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	3f ef       	ldi	r19, 0xFF	; 255
    2b62:	4f e7       	ldi	r20, 0x7F	; 127
    2b64:	57 e4       	ldi	r21, 0x47	; 71
    2b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b6a:	18 16       	cp	r1, r24
    2b6c:	4c f5       	brge	.+82     	; 0x2bc0 <LCD_vSendData+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e2       	ldi	r20, 0x20	; 32
    2b7c:	51 e4       	ldi	r21, 0x41	; 65
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9c 8b       	std	Y+20, r25	; 0x14
    2b94:	8b 8b       	std	Y+19, r24	; 0x13
    2b96:	0f c0       	rjmp	.+30     	; 0x2bb6 <LCD_vSendData+0x2c0>
    2b98:	88 ec       	ldi	r24, 0xC8	; 200
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9a 8b       	std	Y+18, r25	; 0x12
    2b9e:	89 8b       	std	Y+17, r24	; 0x11
    2ba0:	89 89       	ldd	r24, Y+17	; 0x11
    2ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <LCD_vSendData+0x2ae>
    2ba8:	9a 8b       	std	Y+18, r25	; 0x12
    2baa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bac:	8b 89       	ldd	r24, Y+19	; 0x13
    2bae:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	9c 8b       	std	Y+20, r25	; 0x14
    2bb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bba:	00 97       	sbiw	r24, 0x00	; 0
    2bbc:	69 f7       	brne	.-38     	; 0x2b98 <LCD_vSendData+0x2a2>
    2bbe:	14 c0       	rjmp	.+40     	; 0x2be8 <LCD_vSendData+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc0:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc2:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9c 8b       	std	Y+20, r25	; 0x14
    2bd2:	8b 8b       	std	Y+19, r24	; 0x13
    2bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd8:	98 8b       	std	Y+16, r25	; 0x10
    2bda:	8f 87       	std	Y+15, r24	; 0x0f
    2bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bde:	98 89       	ldd	r25, Y+16	; 0x10
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <LCD_vSendData+0x2ea>
    2be4:	98 8b       	std	Y+16, r25	; 0x10
    2be6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	SetPinValue(LCD_CTRL_PORT,EN_PIN,LOW);
    2be8:	83 e0       	ldi	r24, 0x03	; 3
    2bea:	62 e0       	ldi	r22, 0x02	; 2
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	a8 e4       	ldi	r26, 0x48	; 72
    2bf8:	b2 e4       	ldi	r27, 0x42	; 66
    2bfa:	8b 87       	std	Y+11, r24	; 0x0b
    2bfc:	9c 87       	std	Y+12, r25	; 0x0c
    2bfe:	ad 87       	std	Y+13, r26	; 0x0d
    2c00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	4a ef       	ldi	r20, 0xFA	; 250
    2c10:	54 e4       	ldi	r21, 0x44	; 68
    2c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	8f 83       	std	Y+7, r24	; 0x07
    2c1c:	98 87       	std	Y+8, r25	; 0x08
    2c1e:	a9 87       	std	Y+9, r26	; 0x09
    2c20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c22:	6f 81       	ldd	r22, Y+7	; 0x07
    2c24:	78 85       	ldd	r23, Y+8	; 0x08
    2c26:	89 85       	ldd	r24, Y+9	; 0x09
    2c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	40 e8       	ldi	r20, 0x80	; 128
    2c30:	5f e3       	ldi	r21, 0x3F	; 63
    2c32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c36:	88 23       	and	r24, r24
    2c38:	2c f4       	brge	.+10     	; 0x2c44 <LCD_vSendData+0x34e>
		__ticks = 1;
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	9e 83       	std	Y+6, r25	; 0x06
    2c40:	8d 83       	std	Y+5, r24	; 0x05
    2c42:	3f c0       	rjmp	.+126    	; 0x2cc2 <LCD_vSendData+0x3cc>
	else if (__tmp > 65535)
    2c44:	6f 81       	ldd	r22, Y+7	; 0x07
    2c46:	78 85       	ldd	r23, Y+8	; 0x08
    2c48:	89 85       	ldd	r24, Y+9	; 0x09
    2c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	3f ef       	ldi	r19, 0xFF	; 255
    2c50:	4f e7       	ldi	r20, 0x7F	; 127
    2c52:	57 e4       	ldi	r21, 0x47	; 71
    2c54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c58:	18 16       	cp	r1, r24
    2c5a:	4c f5       	brge	.+82     	; 0x2cae <LCD_vSendData+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e2       	ldi	r20, 0x20	; 32
    2c6a:	51 e4       	ldi	r21, 0x41	; 65
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	bc 01       	movw	r22, r24
    2c76:	cd 01       	movw	r24, r26
    2c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	0f c0       	rjmp	.+30     	; 0x2ca4 <LCD_vSendData+0x3ae>
    2c86:	88 ec       	ldi	r24, 0xC8	; 200
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	9c 83       	std	Y+4, r25	; 0x04
    2c8c:	8b 83       	std	Y+3, r24	; 0x03
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	9c 81       	ldd	r25, Y+4	; 0x04
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <LCD_vSendData+0x39c>
    2c96:	9c 83       	std	Y+4, r25	; 0x04
    2c98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	69 f7       	brne	.-38     	; 0x2c86 <LCD_vSendData+0x390>
    2cac:	14 c0       	rjmp	.+40     	; 0x2cd6 <LCD_vSendData+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cae:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb0:	78 85       	ldd	r23, Y+8	; 0x08
    2cb2:	89 85       	ldd	r24, Y+9	; 0x09
    2cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	9e 83       	std	Y+6, r25	; 0x06
    2cc0:	8d 83       	std	Y+5, r24	; 0x05
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	9a 83       	std	Y+2, r25	; 0x02
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <LCD_vSendData+0x3d8>
    2cd2:	9a 83       	std	Y+2, r25	; 0x02
    2cd4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
//	SetPinValue(LCD_CTRL_PORT,EN_PIN,HIGH);
//	_delay_ms(50);
}
    2cd6:	e9 96       	adiw	r28, 0x39	; 57
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	cd bf       	out	0x3d, r28	; 61
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <LCD_DispalyStr>:
//Display String
void LCD_DispalyStr(u8 Str[]){
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <LCD_DispalyStr+0x6>
    2cee:	0f 92       	push	r0
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	9b 83       	std	Y+3, r25	; 0x03
    2cf6:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;Str[i]!='\0';++i){
    2cf8:	19 82       	std	Y+1, r1	; 0x01
    2cfa:	0e c0       	rjmp	.+28     	; 0x2d18 <LCD_DispalyStr+0x30>
		LCD_vSendData(Str[i]);
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	28 2f       	mov	r18, r24
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	9b 81       	ldd	r25, Y+3	; 0x03
    2d06:	fc 01       	movw	r30, r24
    2d08:	e2 0f       	add	r30, r18
    2d0a:	f3 1f       	adc	r31, r19
    2d0c:	80 81       	ld	r24, Z
    2d0e:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_vSendData>
//	SetPinValue(LCD_CTRL_PORT,EN_PIN,HIGH);
//	_delay_ms(50);
}
//Display String
void LCD_DispalyStr(u8 Str[]){
	for(u8 i=0;Str[i]!='\0';++i){
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	8f 5f       	subi	r24, 0xFF	; 255
    2d16:	89 83       	std	Y+1, r24	; 0x01
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	28 2f       	mov	r18, r24
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	9b 81       	ldd	r25, Y+3	; 0x03
    2d22:	fc 01       	movw	r30, r24
    2d24:	e2 0f       	add	r30, r18
    2d26:	f3 1f       	adc	r31, r19
    2d28:	80 81       	ld	r24, Z
    2d2a:	88 23       	and	r24, r24
    2d2c:	39 f7       	brne	.-50     	; 0x2cfc <LCD_DispalyStr+0x14>
		LCD_vSendData(Str[i]);
	}
}
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <LCD_Go_To_Row_Col>:
//Go to row & column
void LCD_Go_To_Row_Col(u8 row , u8 col){
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <LCD_Go_To_Row_Col+0x6>
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <LCD_Go_To_Row_Col+0x8>
    2d42:	0f 92       	push	r0
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	8a 83       	std	Y+2, r24	; 0x02
    2d4a:	6b 83       	std	Y+3, r22	; 0x03
	u8 address;
	switch(row){
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	28 2f       	mov	r18, r24
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	3d 83       	std	Y+5, r19	; 0x05
    2d54:	2c 83       	std	Y+4, r18	; 0x04
    2d56:	8c 81       	ldd	r24, Y+4	; 0x04
    2d58:	9d 81       	ldd	r25, Y+5	; 0x05
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	31 f0       	breq	.+12     	; 0x2d6a <LCD_Go_To_Row_Col+0x30>
    2d5e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d60:	3d 81       	ldd	r19, Y+5	; 0x05
    2d62:	20 34       	cpi	r18, 0x40	; 64
    2d64:	31 05       	cpc	r19, r1
    2d66:	51 f0       	breq	.+20     	; 0x2d7c <LCD_Go_To_Row_Col+0x42>
    2d68:	11 c0       	rjmp	.+34     	; 0x2d8c <LCD_Go_To_Row_Col+0x52>
	case LCD_ROW_0:
		address=row+col;
    2d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	89 0f       	add	r24, r25
    2d70:	89 83       	std	Y+1, r24	; 0x01
		LCD_vSendCMD(address|SET_CURSOR_LOCATION);
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	80 68       	ori	r24, 0x80	; 128
    2d76:	0e 94 82 12 	call	0x2504	; 0x2504 <LCD_vSendCMD>
    2d7a:	08 c0       	rjmp	.+16     	; 0x2d8c <LCD_Go_To_Row_Col+0x52>
		break;
	case LCD_ROW_1:
		address=row+col;
    2d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d80:	89 0f       	add	r24, r25
    2d82:	89 83       	std	Y+1, r24	; 0x01
			LCD_vSendCMD(address|SET_CURSOR_LOCATION);
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	80 68       	ori	r24, 0x80	; 128
    2d88:	0e 94 82 12 	call	0x2504	; 0x2504 <LCD_vSendCMD>
			break;
	}
}
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <LCD_DisplayStr_Row_Col>:
//Display string (row,column)
void LCD_DisplayStr_Row_Col(u8 Str[] ,u8 row , u8 col){
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	00 d0       	rcall	.+0      	; 0x2da2 <LCD_DisplayStr_Row_Col+0x6>
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <LCD_DisplayStr_Row_Col+0x8>
    2da4:	cd b7       	in	r28, 0x3d	; 61
    2da6:	de b7       	in	r29, 0x3e	; 62
    2da8:	9a 83       	std	Y+2, r25	; 0x02
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	6b 83       	std	Y+3, r22	; 0x03
    2dae:	4c 83       	std	Y+4, r20	; 0x04
	LCD_Go_To_Row_Col(row ,col);
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	6c 81       	ldd	r22, Y+4	; 0x04
    2db4:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <LCD_Go_To_Row_Col>
	LCD_DispalyStr(Str);
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbc:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_DispalyStr>
}
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	08 95       	ret

00002dce <LCD_IntToStr>:
//integer to string
void LCD_IntToStr(u8 num){
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <LCD_IntToStr+0x6>
    2dd4:	00 d0       	rcall	.+0      	; 0x2dd6 <LCD_IntToStr+0x8>
    2dd6:	0f 92       	push	r0
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	8b 83       	std	Y+3, r24	; 0x03
 u8 temp=num,No_Of_Digits=1;
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	8a 83       	std	Y+2, r24	; 0x02
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	14 c0       	rjmp	.+40     	; 0x2e10 <LCD_IntToStr+0x42>
 while(temp!=0)
 {
	 No_Of_Digits*=10;
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	88 2f       	mov	r24, r24
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	9c 01       	movw	r18, r24
    2df0:	22 0f       	add	r18, r18
    2df2:	33 1f       	adc	r19, r19
    2df4:	c9 01       	movw	r24, r18
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	88 0f       	add	r24, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	82 0f       	add	r24, r18
    2e00:	93 1f       	adc	r25, r19
    2e02:	89 83       	std	Y+1, r24	; 0x01
	 temp/=10;
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	9a e0       	ldi	r25, 0x0A	; 10
    2e08:	69 2f       	mov	r22, r25
    2e0a:	0e 94 43 1a 	call	0x3486	; 0x3486 <__udivmodqi4>
    2e0e:	8a 83       	std	Y+2, r24	; 0x02
	LCD_DispalyStr(Str);
}
//integer to string
void LCD_IntToStr(u8 num){
 u8 temp=num,No_Of_Digits=1;
 while(temp!=0)
    2e10:	8a 81       	ldd	r24, Y+2	; 0x02
    2e12:	88 23       	and	r24, r24
    2e14:	49 f7       	brne	.-46     	; 0x2de8 <LCD_IntToStr+0x1a>
 {
	 No_Of_Digits*=10;
	 temp/=10;

 }
 No_Of_Digits/=10;
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a e0       	ldi	r25, 0x0A	; 10
    2e1a:	69 2f       	mov	r22, r25
    2e1c:	0e 94 43 1a 	call	0x3486	; 0x3486 <__udivmodqi4>
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	82 c0       	rjmp	.+260    	; 0x2f28 <LCD_IntToStr+0x15a>
 while(num!=0){
	 switch((num/No_Of_Digits)){
    2e24:	8b 81       	ldd	r24, Y+3	; 0x03
    2e26:	99 81       	ldd	r25, Y+1	; 0x01
    2e28:	69 2f       	mov	r22, r25
    2e2a:	0e 94 43 1a 	call	0x3486	; 0x3486 <__udivmodqi4>
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	3d 83       	std	Y+5, r19	; 0x05
    2e34:	2c 83       	std	Y+4, r18	; 0x04
    2e36:	8c 81       	ldd	r24, Y+4	; 0x04
    2e38:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3a:	84 30       	cpi	r24, 0x04	; 4
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <LCD_IntToStr+0x74>
    2e40:	4f c0       	rjmp	.+158    	; 0x2ee0 <LCD_IntToStr+0x112>
    2e42:	2c 81       	ldd	r18, Y+4	; 0x04
    2e44:	3d 81       	ldd	r19, Y+5	; 0x05
    2e46:	25 30       	cpi	r18, 0x05	; 5
    2e48:	31 05       	cpc	r19, r1
    2e4a:	d4 f4       	brge	.+52     	; 0x2e80 <LCD_IntToStr+0xb2>
    2e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e50:	81 30       	cpi	r24, 0x01	; 1
    2e52:	91 05       	cpc	r25, r1
    2e54:	c9 f1       	breq	.+114    	; 0x2ec8 <LCD_IntToStr+0xfa>
    2e56:	2c 81       	ldd	r18, Y+4	; 0x04
    2e58:	3d 81       	ldd	r19, Y+5	; 0x05
    2e5a:	22 30       	cpi	r18, 0x02	; 2
    2e5c:	31 05       	cpc	r19, r1
    2e5e:	2c f4       	brge	.+10     	; 0x2e6a <LCD_IntToStr+0x9c>
    2e60:	8c 81       	ldd	r24, Y+4	; 0x04
    2e62:	9d 81       	ldd	r25, Y+5	; 0x05
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	61 f1       	breq	.+88     	; 0x2ec0 <LCD_IntToStr+0xf2>
    2e68:	52 c0       	rjmp	.+164    	; 0x2f0e <LCD_IntToStr+0x140>
    2e6a:	2c 81       	ldd	r18, Y+4	; 0x04
    2e6c:	3d 81       	ldd	r19, Y+5	; 0x05
    2e6e:	22 30       	cpi	r18, 0x02	; 2
    2e70:	31 05       	cpc	r19, r1
    2e72:	71 f1       	breq	.+92     	; 0x2ed0 <LCD_IntToStr+0x102>
    2e74:	8c 81       	ldd	r24, Y+4	; 0x04
    2e76:	9d 81       	ldd	r25, Y+5	; 0x05
    2e78:	83 30       	cpi	r24, 0x03	; 3
    2e7a:	91 05       	cpc	r25, r1
    2e7c:	69 f1       	breq	.+90     	; 0x2ed8 <LCD_IntToStr+0x10a>
    2e7e:	47 c0       	rjmp	.+142    	; 0x2f0e <LCD_IntToStr+0x140>
    2e80:	2c 81       	ldd	r18, Y+4	; 0x04
    2e82:	3d 81       	ldd	r19, Y+5	; 0x05
    2e84:	27 30       	cpi	r18, 0x07	; 7
    2e86:	31 05       	cpc	r19, r1
    2e88:	b9 f1       	breq	.+110    	; 0x2ef8 <LCD_IntToStr+0x12a>
    2e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8e:	88 30       	cpi	r24, 0x08	; 8
    2e90:	91 05       	cpc	r25, r1
    2e92:	5c f4       	brge	.+22     	; 0x2eaa <LCD_IntToStr+0xdc>
    2e94:	2c 81       	ldd	r18, Y+4	; 0x04
    2e96:	3d 81       	ldd	r19, Y+5	; 0x05
    2e98:	25 30       	cpi	r18, 0x05	; 5
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	29 f1       	breq	.+74     	; 0x2ee8 <LCD_IntToStr+0x11a>
    2e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea2:	86 30       	cpi	r24, 0x06	; 6
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	21 f1       	breq	.+72     	; 0x2ef0 <LCD_IntToStr+0x122>
    2ea8:	32 c0       	rjmp	.+100    	; 0x2f0e <LCD_IntToStr+0x140>
    2eaa:	2c 81       	ldd	r18, Y+4	; 0x04
    2eac:	3d 81       	ldd	r19, Y+5	; 0x05
    2eae:	28 30       	cpi	r18, 0x08	; 8
    2eb0:	31 05       	cpc	r19, r1
    2eb2:	31 f1       	breq	.+76     	; 0x2f00 <LCD_IntToStr+0x132>
    2eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb8:	89 30       	cpi	r24, 0x09	; 9
    2eba:	91 05       	cpc	r25, r1
    2ebc:	29 f1       	breq	.+74     	; 0x2f08 <LCD_IntToStr+0x13a>
    2ebe:	27 c0       	rjmp	.+78     	; 0x2f0e <LCD_IntToStr+0x140>
	 case 0:
		 LCD_vSendData('0');
    2ec0:	80 e3       	ldi	r24, 0x30	; 48
    2ec2:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_vSendData>
    2ec6:	23 c0       	rjmp	.+70     	; 0x2f0e <LCD_IntToStr+0x140>
		 break;
	 case 1:
	 		 LCD_vSendData('1');
    2ec8:	81 e3       	ldi	r24, 0x31	; 49
    2eca:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_vSendData>
    2ece:	1f c0       	rjmp	.+62     	; 0x2f0e <LCD_IntToStr+0x140>
	 		 break;
	 case 2:
	 		 LCD_vSendData('2');
    2ed0:	82 e3       	ldi	r24, 0x32	; 50
    2ed2:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_vSendData>
    2ed6:	1b c0       	rjmp	.+54     	; 0x2f0e <LCD_IntToStr+0x140>
	 		 break;
	 case 3:
	 		 LCD_vSendData('3');
    2ed8:	83 e3       	ldi	r24, 0x33	; 51
    2eda:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_vSendData>
    2ede:	17 c0       	rjmp	.+46     	; 0x2f0e <LCD_IntToStr+0x140>
	 		 break;
	 case 4:
	 		 LCD_vSendData('4');
    2ee0:	84 e3       	ldi	r24, 0x34	; 52
    2ee2:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_vSendData>
    2ee6:	13 c0       	rjmp	.+38     	; 0x2f0e <LCD_IntToStr+0x140>
	 		 break;
	 case 5:
	 		 LCD_vSendData('5');
    2ee8:	85 e3       	ldi	r24, 0x35	; 53
    2eea:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_vSendData>
    2eee:	0f c0       	rjmp	.+30     	; 0x2f0e <LCD_IntToStr+0x140>
	 		 break;
	 case 6:
	 		 LCD_vSendData('6');
    2ef0:	86 e3       	ldi	r24, 0x36	; 54
    2ef2:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_vSendData>
    2ef6:	0b c0       	rjmp	.+22     	; 0x2f0e <LCD_IntToStr+0x140>
	 		 break;
	 case 7:
	 		 LCD_vSendData('7');
    2ef8:	87 e3       	ldi	r24, 0x37	; 55
    2efa:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_vSendData>
    2efe:	07 c0       	rjmp	.+14     	; 0x2f0e <LCD_IntToStr+0x140>
	 		 break;
	 case 8:
	 		 LCD_vSendData('8');
    2f00:	88 e3       	ldi	r24, 0x38	; 56
    2f02:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_vSendData>
    2f06:	03 c0       	rjmp	.+6      	; 0x2f0e <LCD_IntToStr+0x140>
	 		 break;
	 case 9:
	 		 LCD_vSendData('9');
    2f08:	89 e3       	ldi	r24, 0x39	; 57
    2f0a:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_vSendData>
	 		 break;
	 }
	num%=No_Of_Digits;
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	99 81       	ldd	r25, Y+1	; 0x01
    2f12:	69 2f       	mov	r22, r25
    2f14:	0e 94 43 1a 	call	0x3486	; 0x3486 <__udivmodqi4>
    2f18:	89 2f       	mov	r24, r25
    2f1a:	8b 83       	std	Y+3, r24	; 0x03
	No_Of_Digits/=10;
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	9a e0       	ldi	r25, 0x0A	; 10
    2f20:	69 2f       	mov	r22, r25
    2f22:	0e 94 43 1a 	call	0x3486	; 0x3486 <__udivmodqi4>
    2f26:	89 83       	std	Y+1, r24	; 0x01
	 No_Of_Digits*=10;
	 temp/=10;

 }
 No_Of_Digits/=10;
 while(num!=0){
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	88 23       	and	r24, r24
    2f2c:	09 f0       	breq	.+2      	; 0x2f30 <LCD_IntToStr+0x162>
    2f2e:	7a cf       	rjmp	.-268    	; 0x2e24 <LCD_IntToStr+0x56>
	 }
	num%=No_Of_Digits;
	No_Of_Digits/=10;
 }
 return;
}
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	cf 91       	pop	r28
    2f3c:	df 91       	pop	r29
    2f3e:	08 95       	ret

00002f40 <KEYPAD_Init>:
	{'7','8','9','*'},
	{'%','0','=','/'}
};

//keypad initialization
void KEYPAD_Init(void){
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
	//COLs
	SetPinDir(KEYPAD_PORT,COL_0,OUTPUT);
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	41 e0       	ldi	r20, 0x01	; 1
    2f4e:	0e 94 9f 0a 	call	0x153e	; 0x153e <SetPinDir>
	SetPinDir(KEYPAD_PORT,COL_1,OUTPUT);
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	61 e0       	ldi	r22, 0x01	; 1
    2f56:	41 e0       	ldi	r20, 0x01	; 1
    2f58:	0e 94 9f 0a 	call	0x153e	; 0x153e <SetPinDir>
	SetPinDir(KEYPAD_PORT,COL_2,OUTPUT);
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	62 e0       	ldi	r22, 0x02	; 2
    2f60:	41 e0       	ldi	r20, 0x01	; 1
    2f62:	0e 94 9f 0a 	call	0x153e	; 0x153e <SetPinDir>
	SetPinDir(KEYPAD_PORT,COL_3,OUTPUT);
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	63 e0       	ldi	r22, 0x03	; 3
    2f6a:	41 e0       	ldi	r20, 0x01	; 1
    2f6c:	0e 94 9f 0a 	call	0x153e	; 0x153e <SetPinDir>
	
	SetPinValue(KEYPAD_PORT,COL_0,HIGH);
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	60 e0       	ldi	r22, 0x00	; 0
    2f74:	41 e0       	ldi	r20, 0x01	; 1
    2f76:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
	SetPinValue(KEYPAD_PORT,COL_1,HIGH);
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	61 e0       	ldi	r22, 0x01	; 1
    2f7e:	41 e0       	ldi	r20, 0x01	; 1
    2f80:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
	SetPinValue(KEYPAD_PORT,COL_2,HIGH);
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	62 e0       	ldi	r22, 0x02	; 2
    2f88:	41 e0       	ldi	r20, 0x01	; 1
    2f8a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
	SetPinValue(KEYPAD_PORT,COL_3,HIGH);
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	63 e0       	ldi	r22, 0x03	; 3
    2f92:	41 e0       	ldi	r20, 0x01	; 1
    2f94:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
	
	//ROWs
	SetPinDir(KEYPAD_PORT,ROW_0,INPUT);
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	64 e0       	ldi	r22, 0x04	; 4
    2f9c:	40 e0       	ldi	r20, 0x00	; 0
    2f9e:	0e 94 9f 0a 	call	0x153e	; 0x153e <SetPinDir>
	SetPinDir(KEYPAD_PORT,ROW_1,INPUT);
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	65 e0       	ldi	r22, 0x05	; 5
    2fa6:	40 e0       	ldi	r20, 0x00	; 0
    2fa8:	0e 94 9f 0a 	call	0x153e	; 0x153e <SetPinDir>
	SetPinDir(KEYPAD_PORT,ROW_2,INPUT);
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	66 e0       	ldi	r22, 0x06	; 6
    2fb0:	40 e0       	ldi	r20, 0x00	; 0
    2fb2:	0e 94 9f 0a 	call	0x153e	; 0x153e <SetPinDir>
	SetPinDir(KEYPAD_PORT,ROW_3,INPUT);
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	67 e0       	ldi	r22, 0x07	; 7
    2fba:	40 e0       	ldi	r20, 0x00	; 0
    2fbc:	0e 94 9f 0a 	call	0x153e	; 0x153e <SetPinDir>
	
	//Pull Up Resistors
	SetPinValue(KEYPAD_PORT,ROW_0,HIGH);
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	64 e0       	ldi	r22, 0x04	; 4
    2fc4:	41 e0       	ldi	r20, 0x01	; 1
    2fc6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
	SetPinValue(KEYPAD_PORT,ROW_1,HIGH);
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	65 e0       	ldi	r22, 0x05	; 5
    2fce:	41 e0       	ldi	r20, 0x01	; 1
    2fd0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
	SetPinValue(KEYPAD_PORT,ROW_2,HIGH);
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	66 e0       	ldi	r22, 0x06	; 6
    2fd8:	41 e0       	ldi	r20, 0x01	; 1
    2fda:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
	SetPinValue(KEYPAD_PORT,ROW_3,HIGH);
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	67 e0       	ldi	r22, 0x07	; 7
    2fe2:	41 e0       	ldi	r20, 0x01	; 1
    2fe4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
}
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	08 95       	ret

00002fee <KEYPAD_GetValue>:

//keypad getting value
u8 KEYPAD_GetValue(void){
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <KEYPAD_GetValue+0x6>
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <KEYPAD_GetValue+0x8>
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
	u8 value=NOT_PRESSED,Col_Counter,Row_Counter;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	8b 83       	std	Y+3, r24	; 0x03
	for(Col_Counter=COL_0; Col_Counter<=COL_3;Col_Counter++){
    2ffe:	1a 82       	std	Y+2, r1	; 0x02
    3000:	3f c0       	rjmp	.+126    	; 0x3080 <KEYPAD_GetValue+0x92>
		SetPinValue(KEYPAD_PORT,Col_Counter,LOW);
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	6a 81       	ldd	r22, Y+2	; 0x02
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
		for(Row_Counter=ROW_0; Row_Counter<=ROW_3;Row_Counter++){
    300c:	84 e0       	ldi	r24, 0x04	; 4
    300e:	89 83       	std	Y+1, r24	; 0x01
    3010:	2c c0       	rjmp	.+88     	; 0x306a <KEYPAD_GetValue+0x7c>
			if(ReadPinValue(KEYPAD_PORT,Row_Counter)==PRESSED){
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	69 81       	ldd	r22, Y+1	; 0x01
    3016:	0e 94 97 0c 	call	0x192e	; 0x192e <ReadPinValue>
    301a:	88 23       	and	r24, r24
    301c:	19 f5       	brne	.+70     	; 0x3064 <KEYPAD_GetValue+0x76>
				while(ReadPinValue(KEYPAD_PORT,Row_Counter)==PRESSED);
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	69 81       	ldd	r22, Y+1	; 0x01
    3022:	0e 94 97 0c 	call	0x192e	; 0x192e <ReadPinValue>
    3026:	88 23       	and	r24, r24
    3028:	d1 f3       	breq	.-12     	; 0x301e <KEYPAD_GetValue+0x30>
				value=KEYPAD_VALUES[Row_Counter-ROW_0][Col_Counter];
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	88 2f       	mov	r24, r24
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	ac 01       	movw	r20, r24
    3032:	44 50       	subi	r20, 0x04	; 4
    3034:	50 40       	sbci	r21, 0x00	; 0
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	28 2f       	mov	r18, r24
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	ca 01       	movw	r24, r20
    303e:	88 0f       	add	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	82 0f       	add	r24, r18
    3048:	93 1f       	adc	r25, r19
    304a:	fc 01       	movw	r30, r24
    304c:	e8 59       	subi	r30, 0x98	; 152
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	80 81       	ld	r24, Z
    3052:	8b 83       	std	Y+3, r24	; 0x03
				SetPinValue(KEYPAD_PORT,Col_Counter,HIGH);
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	6a 81       	ldd	r22, Y+2	; 0x02
    3058:	41 e0       	ldi	r20, 0x01	; 1
    305a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
				return value;
    305e:	8b 81       	ldd	r24, Y+3	; 0x03
    3060:	8c 83       	std	Y+4, r24	; 0x04
    3062:	14 c0       	rjmp	.+40     	; 0x308c <KEYPAD_GetValue+0x9e>
//keypad getting value
u8 KEYPAD_GetValue(void){
	u8 value=NOT_PRESSED,Col_Counter,Row_Counter;
	for(Col_Counter=COL_0; Col_Counter<=COL_3;Col_Counter++){
		SetPinValue(KEYPAD_PORT,Col_Counter,LOW);
		for(Row_Counter=ROW_0; Row_Counter<=ROW_3;Row_Counter++){
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	8f 5f       	subi	r24, 0xFF	; 255
    3068:	89 83       	std	Y+1, r24	; 0x01
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	88 30       	cpi	r24, 0x08	; 8
    306e:	88 f2       	brcs	.-94     	; 0x3012 <KEYPAD_GetValue+0x24>
				value=KEYPAD_VALUES[Row_Counter-ROW_0][Col_Counter];
				SetPinValue(KEYPAD_PORT,Col_Counter,HIGH);
				return value;
			}
		}
		SetPinValue(KEYPAD_PORT,Col_Counter,HIGH);
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	6a 81       	ldd	r22, Y+2	; 0x02
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	0e 94 9b 0b 	call	0x1736	; 0x1736 <SetPinValue>
}

//keypad getting value
u8 KEYPAD_GetValue(void){
	u8 value=NOT_PRESSED,Col_Counter,Row_Counter;
	for(Col_Counter=COL_0; Col_Counter<=COL_3;Col_Counter++){
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	8f 5f       	subi	r24, 0xFF	; 255
    307e:	8a 83       	std	Y+2, r24	; 0x02
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	84 30       	cpi	r24, 0x04	; 4
    3084:	08 f4       	brcc	.+2      	; 0x3088 <KEYPAD_GetValue+0x9a>
    3086:	bd cf       	rjmp	.-134    	; 0x3002 <KEYPAD_GetValue+0x14>
				return value;
			}
		}
		SetPinValue(KEYPAD_PORT,Col_Counter,HIGH);
	}
	return value;
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
    308a:	8c 83       	std	Y+4, r24	; 0x04
    308c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	0f 90       	pop	r0
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <motor_Forward>:
#include "../../MCAL/DIO/DIO_CFG.h"
#include "../../MCAL/DIO/DIO.h"
#include "DCMOTOR.h"

void motor_Forward()
{
    309c:	df 93       	push	r29
    309e:	cf 93       	push	r28
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
	DDRB=0xFF;
    30a4:	e7 e3       	ldi	r30, 0x37	; 55
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	8f ef       	ldi	r24, 0xFF	; 255
    30aa:	80 83       	st	Z, r24
	SET_BIT(PORTB, motorLeftForward);
    30ac:	a8 e3       	ldi	r26, 0x38	; 56
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	e8 e3       	ldi	r30, 0x38	; 56
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	80 68       	ori	r24, 0x80	; 128
    30b8:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, motorLeftBackward);
    30ba:	a8 e3       	ldi	r26, 0x38	; 56
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e8 e3       	ldi	r30, 0x38	; 56
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	8f 7b       	andi	r24, 0xBF	; 191
    30c6:	8c 93       	st	X, r24

	SET_BIT(PORTB, motorRightForward);
    30c8:	a8 e3       	ldi	r26, 0x38	; 56
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	e8 e3       	ldi	r30, 0x38	; 56
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	80 81       	ld	r24, Z
    30d2:	80 62       	ori	r24, 0x20	; 32
    30d4:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, motorRightBackward);
    30d6:	a8 e3       	ldi	r26, 0x38	; 56
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	e8 e3       	ldi	r30, 0x38	; 56
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	8f 7e       	andi	r24, 0xEF	; 239
    30e2:	8c 93       	st	X, r24

}
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	08 95       	ret

000030ea <motor_Backward>:

void motor_Backward()
{
    30ea:	df 93       	push	r29
    30ec:	cf 93       	push	r28
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
	DDRB=0xFF;
    30f2:	e7 e3       	ldi	r30, 0x37	; 55
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	8f ef       	ldi	r24, 0xFF	; 255
    30f8:	80 83       	st	Z, r24
	CLEAR_BIT(PORTB, motorLeftForward);
    30fa:	a8 e3       	ldi	r26, 0x38	; 56
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e8 e3       	ldi	r30, 0x38	; 56
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	8f 77       	andi	r24, 0x7F	; 127
    3106:	8c 93       	st	X, r24
	SET_BIT(PORTB, motorLeftBackward);
    3108:	a8 e3       	ldi	r26, 0x38	; 56
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	e8 e3       	ldi	r30, 0x38	; 56
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	80 64       	ori	r24, 0x40	; 64
    3114:	8c 93       	st	X, r24

	CLEAR_BIT(PORTB, motorRightForward);
    3116:	a8 e3       	ldi	r26, 0x38	; 56
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	e8 e3       	ldi	r30, 0x38	; 56
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	8f 7d       	andi	r24, 0xDF	; 223
    3122:	8c 93       	st	X, r24
	SET_BIT(PORTB, motorRightBackward);
    3124:	a8 e3       	ldi	r26, 0x38	; 56
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e8 e3       	ldi	r30, 0x38	; 56
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	80 61       	ori	r24, 0x10	; 16
    3130:	8c 93       	st	X, r24
}
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

00003138 <motor_Right>:

void motor_Right()
{
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
	DDRB=0xFF;
    3140:	e7 e3       	ldi	r30, 0x37	; 55
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	8f ef       	ldi	r24, 0xFF	; 255
    3146:	80 83       	st	Z, r24
	CLEAR_BIT(PORTB, motorLeftForward);
    3148:	a8 e3       	ldi	r26, 0x38	; 56
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	e8 e3       	ldi	r30, 0x38	; 56
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	8f 77       	andi	r24, 0x7F	; 127
    3154:	8c 93       	st	X, r24
	SET_BIT(PORTB, motorLeftBackward);
    3156:	a8 e3       	ldi	r26, 0x38	; 56
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	e8 e3       	ldi	r30, 0x38	; 56
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	80 64       	ori	r24, 0x40	; 64
    3162:	8c 93       	st	X, r24

	SET_BIT(PORTB, motorRightForward);
    3164:	a8 e3       	ldi	r26, 0x38	; 56
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e8 e3       	ldi	r30, 0x38	; 56
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	80 62       	ori	r24, 0x20	; 32
    3170:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, motorRightBackward);
    3172:	a8 e3       	ldi	r26, 0x38	; 56
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	e8 e3       	ldi	r30, 0x38	; 56
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	8f 7e       	andi	r24, 0xEF	; 239
    317e:	8c 93       	st	X, r24
}
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	08 95       	ret

00003186 <motor_LefT>:


void motor_LefT()
{
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
	DDRB=0xFF;
    318e:	e7 e3       	ldi	r30, 0x37	; 55
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	8f ef       	ldi	r24, 0xFF	; 255
    3194:	80 83       	st	Z, r24
	SET_BIT(PORTB, motorLeftForward);
    3196:	a8 e3       	ldi	r26, 0x38	; 56
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	e8 e3       	ldi	r30, 0x38	; 56
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	80 68       	ori	r24, 0x80	; 128
    31a2:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, motorLeftBackward);
    31a4:	a8 e3       	ldi	r26, 0x38	; 56
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e8 e3       	ldi	r30, 0x38	; 56
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	8f 7b       	andi	r24, 0xBF	; 191
    31b0:	8c 93       	st	X, r24

	CLEAR_BIT(PORTB, motorRightForward);
    31b2:	a8 e3       	ldi	r26, 0x38	; 56
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	e8 e3       	ldi	r30, 0x38	; 56
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	8f 7d       	andi	r24, 0xDF	; 223
    31be:	8c 93       	st	X, r24
	SET_BIT(PORTB, motorRightBackward);
    31c0:	a8 e3       	ldi	r26, 0x38	; 56
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	e8 e3       	ldi	r30, 0x38	; 56
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	80 61       	ori	r24, 0x10	; 16
    31cc:	8c 93       	st	X, r24
}
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	08 95       	ret

000031d4 <motor_STOP>:


void motor_STOP()
{
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
	DDRB=0xFF;
    31dc:	e7 e3       	ldi	r30, 0x37	; 55
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	8f ef       	ldi	r24, 0xFF	; 255
    31e2:	80 83       	st	Z, r24
	CLEAR_BIT(PORTB, motorLeftForward);
    31e4:	a8 e3       	ldi	r26, 0x38	; 56
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	e8 e3       	ldi	r30, 0x38	; 56
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	8f 77       	andi	r24, 0x7F	; 127
    31f0:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, motorLeftBackward);
    31f2:	a8 e3       	ldi	r26, 0x38	; 56
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	e8 e3       	ldi	r30, 0x38	; 56
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	8f 7b       	andi	r24, 0xBF	; 191
    31fe:	8c 93       	st	X, r24

	CLEAR_BIT(PORTB, motorRightForward);
    3200:	a8 e3       	ldi	r26, 0x38	; 56
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e8 e3       	ldi	r30, 0x38	; 56
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	8f 7d       	andi	r24, 0xDF	; 223
    320c:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB, motorRightBackward);
    320e:	a8 e3       	ldi	r26, 0x38	; 56
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	e8 e3       	ldi	r30, 0x38	; 56
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	8f 7e       	andi	r24, 0xEF	; 239
    321a:	8c 93       	st	X, r24
}
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <main>:

static volatile u16 time=0; //Stores the count from TCNT1
static volatile u16 flag=0;	//Check the status of ECHO pin

int main()
{
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	6a 97       	sbiw	r28, 0x1a	; 26
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
    3236:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_vInit>
	INT0_Enable();
    323a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <INT0_Enable>
	SET_CALLBACK(Receive, Ex_INT0);
    323e:	81 e1       	ldi	r24, 0x11	; 17
    3240:	9a e1       	ldi	r25, 0x1A	; 26
    3242:	60 e0       	ldi	r22, 0x00	; 0
    3244:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <SET_CALLBACK>
	u16 distance=0; //Stores the distance (time/58) cm
    3248:	1a 8e       	std	Y+26, r1	; 0x1a
    324a:	19 8e       	std	Y+25, r1	; 0x19
	sei();
    324c:	78 94       	sei
	SET_BIT(DDRD,TRIG);//TRIG PD0 as output
    324e:	a1 e3       	ldi	r26, 0x31	; 49
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	e1 e3       	ldi	r30, 0x31	; 49
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	81 60       	ori	r24, 0x01	; 1
    325a:	8c 93       	st	X, r24
	CLEAR_BIT(DDRD,ECHO);//ECHO PD2 as input
    325c:	a1 e3       	ldi	r26, 0x31	; 49
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	e1 e3       	ldi	r30, 0x31	; 49
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	8b 7f       	andi	r24, 0xFB	; 251
    3268:	8c 93       	st	X, r24
	while(1)
	{
			SET_BIT(PORTD,TRIG);//Set TRIG PD0 High
    326a:	a2 e3       	ldi	r26, 0x32	; 50
    326c:	b0 e0       	ldi	r27, 0x00	; 0
    326e:	e2 e3       	ldi	r30, 0x32	; 50
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	81 60       	ori	r24, 0x01	; 1
    3276:	8c 93       	st	X, r24
    3278:	80 e0       	ldi	r24, 0x00	; 0
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	a0 e7       	ldi	r26, 0x70	; 112
    327e:	b1 e4       	ldi	r27, 0x41	; 65
    3280:	8d 8b       	std	Y+21, r24	; 0x15
    3282:	9e 8b       	std	Y+22, r25	; 0x16
    3284:	af 8b       	std	Y+23, r26	; 0x17
    3286:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3288:	6d 89       	ldd	r22, Y+21	; 0x15
    328a:	7e 89       	ldd	r23, Y+22	; 0x16
    328c:	8f 89       	ldd	r24, Y+23	; 0x17
    328e:	98 8d       	ldd	r25, Y+24	; 0x18
    3290:	2b ea       	ldi	r18, 0xAB	; 171
    3292:	3a ea       	ldi	r19, 0xAA	; 170
    3294:	4a e2       	ldi	r20, 0x2A	; 42
    3296:	50 e4       	ldi	r21, 0x40	; 64
    3298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329c:	dc 01       	movw	r26, r24
    329e:	cb 01       	movw	r24, r22
    32a0:	89 8b       	std	Y+17, r24	; 0x11
    32a2:	9a 8b       	std	Y+18, r25	; 0x12
    32a4:	ab 8b       	std	Y+19, r26	; 0x13
    32a6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    32a8:	69 89       	ldd	r22, Y+17	; 0x11
    32aa:	7a 89       	ldd	r23, Y+18	; 0x12
    32ac:	8b 89       	ldd	r24, Y+19	; 0x13
    32ae:	9c 89       	ldd	r25, Y+20	; 0x14
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	40 e8       	ldi	r20, 0x80	; 128
    32b6:	5f e3       	ldi	r21, 0x3F	; 63
    32b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32bc:	88 23       	and	r24, r24
    32be:	1c f4       	brge	.+6      	; 0x32c6 <main+0xa4>
		__ticks = 1;
    32c0:	81 e0       	ldi	r24, 0x01	; 1
    32c2:	88 8b       	std	Y+16, r24	; 0x10
    32c4:	91 c0       	rjmp	.+290    	; 0x33e8 <main+0x1c6>
	else if (__tmp > 255)
    32c6:	69 89       	ldd	r22, Y+17	; 0x11
    32c8:	7a 89       	ldd	r23, Y+18	; 0x12
    32ca:	8b 89       	ldd	r24, Y+19	; 0x13
    32cc:	9c 89       	ldd	r25, Y+20	; 0x14
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	4f e7       	ldi	r20, 0x7F	; 127
    32d4:	53 e4       	ldi	r21, 0x43	; 67
    32d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32da:	18 16       	cp	r1, r24
    32dc:	0c f0       	brlt	.+2      	; 0x32e0 <main+0xbe>
    32de:	7b c0       	rjmp	.+246    	; 0x33d6 <main+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    32e0:	6d 89       	ldd	r22, Y+21	; 0x15
    32e2:	7e 89       	ldd	r23, Y+22	; 0x16
    32e4:	8f 89       	ldd	r24, Y+23	; 0x17
    32e6:	98 8d       	ldd	r25, Y+24	; 0x18
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	4a e7       	ldi	r20, 0x7A	; 122
    32ee:	54 e4       	ldi	r21, 0x44	; 68
    32f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32f4:	dc 01       	movw	r26, r24
    32f6:	cb 01       	movw	r24, r22
    32f8:	8c 87       	std	Y+12, r24	; 0x0c
    32fa:	9d 87       	std	Y+13, r25	; 0x0d
    32fc:	ae 87       	std	Y+14, r26	; 0x0e
    32fe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3300:	6c 85       	ldd	r22, Y+12	; 0x0c
    3302:	7d 85       	ldd	r23, Y+13	; 0x0d
    3304:	8e 85       	ldd	r24, Y+14	; 0x0e
    3306:	9f 85       	ldd	r25, Y+15	; 0x0f
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	4a ef       	ldi	r20, 0xFA	; 250
    330e:	54 e4       	ldi	r21, 0x44	; 68
    3310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	88 87       	std	Y+8, r24	; 0x08
    331a:	99 87       	std	Y+9, r25	; 0x09
    331c:	aa 87       	std	Y+10, r26	; 0x0a
    331e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3320:	68 85       	ldd	r22, Y+8	; 0x08
    3322:	79 85       	ldd	r23, Y+9	; 0x09
    3324:	8a 85       	ldd	r24, Y+10	; 0x0a
    3326:	9b 85       	ldd	r25, Y+11	; 0x0b
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e8       	ldi	r20, 0x80	; 128
    332e:	5f e3       	ldi	r21, 0x3F	; 63
    3330:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3334:	88 23       	and	r24, r24
    3336:	2c f4       	brge	.+10     	; 0x3342 <main+0x120>
		__ticks = 1;
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	9f 83       	std	Y+7, r25	; 0x07
    333e:	8e 83       	std	Y+6, r24	; 0x06
    3340:	3f c0       	rjmp	.+126    	; 0x33c0 <main+0x19e>
	else if (__tmp > 65535)
    3342:	68 85       	ldd	r22, Y+8	; 0x08
    3344:	79 85       	ldd	r23, Y+9	; 0x09
    3346:	8a 85       	ldd	r24, Y+10	; 0x0a
    3348:	9b 85       	ldd	r25, Y+11	; 0x0b
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	3f ef       	ldi	r19, 0xFF	; 255
    334e:	4f e7       	ldi	r20, 0x7F	; 127
    3350:	57 e4       	ldi	r21, 0x47	; 71
    3352:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3356:	18 16       	cp	r1, r24
    3358:	4c f5       	brge	.+82     	; 0x33ac <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    335a:	6c 85       	ldd	r22, Y+12	; 0x0c
    335c:	7d 85       	ldd	r23, Y+13	; 0x0d
    335e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3360:	9f 85       	ldd	r25, Y+15	; 0x0f
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e2       	ldi	r20, 0x20	; 32
    3368:	51 e4       	ldi	r21, 0x41	; 65
    336a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	bc 01       	movw	r22, r24
    3374:	cd 01       	movw	r24, r26
    3376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	9f 83       	std	Y+7, r25	; 0x07
    3380:	8e 83       	std	Y+6, r24	; 0x06
    3382:	0f c0       	rjmp	.+30     	; 0x33a2 <main+0x180>
    3384:	88 ec       	ldi	r24, 0xC8	; 200
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	9d 83       	std	Y+5, r25	; 0x05
    338a:	8c 83       	std	Y+4, r24	; 0x04
    338c:	8c 81       	ldd	r24, Y+4	; 0x04
    338e:	9d 81       	ldd	r25, Y+5	; 0x05
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <main+0x16e>
    3394:	9d 83       	std	Y+5, r25	; 0x05
    3396:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3398:	8e 81       	ldd	r24, Y+6	; 0x06
    339a:	9f 81       	ldd	r25, Y+7	; 0x07
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	9f 83       	std	Y+7, r25	; 0x07
    33a0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33a2:	8e 81       	ldd	r24, Y+6	; 0x06
    33a4:	9f 81       	ldd	r25, Y+7	; 0x07
    33a6:	00 97       	sbiw	r24, 0x00	; 0
    33a8:	69 f7       	brne	.-38     	; 0x3384 <main+0x162>
    33aa:	24 c0       	rjmp	.+72     	; 0x33f4 <main+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ac:	68 85       	ldd	r22, Y+8	; 0x08
    33ae:	79 85       	ldd	r23, Y+9	; 0x09
    33b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    33b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    33b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	9f 83       	std	Y+7, r25	; 0x07
    33be:	8e 83       	std	Y+6, r24	; 0x06
    33c0:	8e 81       	ldd	r24, Y+6	; 0x06
    33c2:	9f 81       	ldd	r25, Y+7	; 0x07
    33c4:	9b 83       	std	Y+3, r25	; 0x03
    33c6:	8a 83       	std	Y+2, r24	; 0x02
    33c8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ca:	9b 81       	ldd	r25, Y+3	; 0x03
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <main+0x1aa>
    33d0:	9b 83       	std	Y+3, r25	; 0x03
    33d2:	8a 83       	std	Y+2, r24	; 0x02
    33d4:	0f c0       	rjmp	.+30     	; 0x33f4 <main+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33d6:	69 89       	ldd	r22, Y+17	; 0x11
    33d8:	7a 89       	ldd	r23, Y+18	; 0x12
    33da:	8b 89       	ldd	r24, Y+19	; 0x13
    33dc:	9c 89       	ldd	r25, Y+20	; 0x14
    33de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	88 8b       	std	Y+16, r24	; 0x10
    33e8:	88 89       	ldd	r24, Y+16	; 0x10
    33ea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	8a 95       	dec	r24
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <main+0x1cc>
    33f2:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(15);
			CLEAR_BIT(PORTD,TRIG);//Set TRIG PD0 LOW
    33f4:	a2 e3       	ldi	r26, 0x32	; 50
    33f6:	b0 e0       	ldi	r27, 0x00	; 0
    33f8:	e2 e3       	ldi	r30, 0x32	; 50
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	80 81       	ld	r24, Z
    33fe:	8e 7f       	andi	r24, 0xFE	; 254
    3400:	8c 93       	st	X, r24
			distance=time/58;
    3402:	80 91 7e 00 	lds	r24, 0x007E
    3406:	90 91 7f 00 	lds	r25, 0x007F
    340a:	2a e3       	ldi	r18, 0x3A	; 58
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	b9 01       	movw	r22, r18
    3410:	0e 94 4f 1a 	call	0x349e	; 0x349e <__udivmodhi4>
    3414:	cb 01       	movw	r24, r22
    3416:	9a 8f       	std	Y+26, r25	; 0x1a
    3418:	89 8f       	std	Y+25, r24	; 0x19
			LCD_IntToStr(distance);
    341a:	89 8d       	ldd	r24, Y+25	; 0x19
    341c:	0e 94 e7 16 	call	0x2dce	; 0x2dce <LCD_IntToStr>
    3420:	24 cf       	rjmp	.-440    	; 0x326a <main+0x48>

00003422 <Receive>:
//


	}
}
void Receive(){
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
	if (flag == 0){ // ECHO state is HIGH (sending)
    342a:	80 91 80 00 	lds	r24, 0x0080
    342e:	90 91 81 00 	lds	r25, 0x0081
    3432:	00 97       	sbiw	r24, 0x00	; 0
    3434:	71 f4       	brne	.+28     	; 0x3452 <Receive+0x30>
		SET_BIT(TCCR1B,CS10); //No prescaling (start timer1)
    3436:	ae e4       	ldi	r26, 0x4E	; 78
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	ee e4       	ldi	r30, 0x4E	; 78
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	81 60       	ori	r24, 0x01	; 1
    3442:	8c 93       	st	X, r24
		flag=1;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	90 93 81 00 	sts	0x0081, r25
    344c:	80 93 80 00 	sts	0x0080, r24
    3450:	17 c0       	rjmp	.+46     	; 0x3480 <Receive+0x5e>
	}
	else{ // ECHO state is LOW (receiving)
		CLEAR_BIT(TCCR1B,CS10); //stop timer1
    3452:	ae e4       	ldi	r26, 0x4E	; 78
    3454:	b0 e0       	ldi	r27, 0x00	; 0
    3456:	ee e4       	ldi	r30, 0x4E	; 78
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	80 81       	ld	r24, Z
    345c:	8e 7f       	andi	r24, 0xFE	; 254
    345e:	8c 93       	st	X, r24
		time=TCNT1; //store the TCNT1 value
    3460:	ec e4       	ldi	r30, 0x4C	; 76
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	90 93 7f 00 	sts	0x007F, r25
    346c:	80 93 7e 00 	sts	0x007E, r24
		TCNT1=0;	//reset TCNT1 value
    3470:	ec e4       	ldi	r30, 0x4C	; 76
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	11 82       	std	Z+1, r1	; 0x01
    3476:	10 82       	st	Z, r1
		flag=0;		//reset flag so that the value is received
    3478:	10 92 81 00 	sts	0x0081, r1
    347c:	10 92 80 00 	sts	0x0080, r1
	}
}
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	08 95       	ret

00003486 <__udivmodqi4>:
    3486:	99 1b       	sub	r25, r25
    3488:	79 e0       	ldi	r23, 0x09	; 9
    348a:	04 c0       	rjmp	.+8      	; 0x3494 <__udivmodqi4_ep>

0000348c <__udivmodqi4_loop>:
    348c:	99 1f       	adc	r25, r25
    348e:	96 17       	cp	r25, r22
    3490:	08 f0       	brcs	.+2      	; 0x3494 <__udivmodqi4_ep>
    3492:	96 1b       	sub	r25, r22

00003494 <__udivmodqi4_ep>:
    3494:	88 1f       	adc	r24, r24
    3496:	7a 95       	dec	r23
    3498:	c9 f7       	brne	.-14     	; 0x348c <__udivmodqi4_loop>
    349a:	80 95       	com	r24
    349c:	08 95       	ret

0000349e <__udivmodhi4>:
    349e:	aa 1b       	sub	r26, r26
    34a0:	bb 1b       	sub	r27, r27
    34a2:	51 e1       	ldi	r21, 0x11	; 17
    34a4:	07 c0       	rjmp	.+14     	; 0x34b4 <__udivmodhi4_ep>

000034a6 <__udivmodhi4_loop>:
    34a6:	aa 1f       	adc	r26, r26
    34a8:	bb 1f       	adc	r27, r27
    34aa:	a6 17       	cp	r26, r22
    34ac:	b7 07       	cpc	r27, r23
    34ae:	10 f0       	brcs	.+4      	; 0x34b4 <__udivmodhi4_ep>
    34b0:	a6 1b       	sub	r26, r22
    34b2:	b7 0b       	sbc	r27, r23

000034b4 <__udivmodhi4_ep>:
    34b4:	88 1f       	adc	r24, r24
    34b6:	99 1f       	adc	r25, r25
    34b8:	5a 95       	dec	r21
    34ba:	a9 f7       	brne	.-22     	; 0x34a6 <__udivmodhi4_loop>
    34bc:	80 95       	com	r24
    34be:	90 95       	com	r25
    34c0:	bc 01       	movw	r22, r24
    34c2:	cd 01       	movw	r24, r26
    34c4:	08 95       	ret

000034c6 <__prologue_saves__>:
    34c6:	2f 92       	push	r2
    34c8:	3f 92       	push	r3
    34ca:	4f 92       	push	r4
    34cc:	5f 92       	push	r5
    34ce:	6f 92       	push	r6
    34d0:	7f 92       	push	r7
    34d2:	8f 92       	push	r8
    34d4:	9f 92       	push	r9
    34d6:	af 92       	push	r10
    34d8:	bf 92       	push	r11
    34da:	cf 92       	push	r12
    34dc:	df 92       	push	r13
    34de:	ef 92       	push	r14
    34e0:	ff 92       	push	r15
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    34ee:	ca 1b       	sub	r28, r26
    34f0:	db 0b       	sbc	r29, r27
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	f8 94       	cli
    34f6:	de bf       	out	0x3e, r29	; 62
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	cd bf       	out	0x3d, r28	; 61
    34fc:	09 94       	ijmp

000034fe <__epilogue_restores__>:
    34fe:	2a 88       	ldd	r2, Y+18	; 0x12
    3500:	39 88       	ldd	r3, Y+17	; 0x11
    3502:	48 88       	ldd	r4, Y+16	; 0x10
    3504:	5f 84       	ldd	r5, Y+15	; 0x0f
    3506:	6e 84       	ldd	r6, Y+14	; 0x0e
    3508:	7d 84       	ldd	r7, Y+13	; 0x0d
    350a:	8c 84       	ldd	r8, Y+12	; 0x0c
    350c:	9b 84       	ldd	r9, Y+11	; 0x0b
    350e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3510:	b9 84       	ldd	r11, Y+9	; 0x09
    3512:	c8 84       	ldd	r12, Y+8	; 0x08
    3514:	df 80       	ldd	r13, Y+7	; 0x07
    3516:	ee 80       	ldd	r14, Y+6	; 0x06
    3518:	fd 80       	ldd	r15, Y+5	; 0x05
    351a:	0c 81       	ldd	r16, Y+4	; 0x04
    351c:	1b 81       	ldd	r17, Y+3	; 0x03
    351e:	aa 81       	ldd	r26, Y+2	; 0x02
    3520:	b9 81       	ldd	r27, Y+1	; 0x01
    3522:	ce 0f       	add	r28, r30
    3524:	d1 1d       	adc	r29, r1
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	de bf       	out	0x3e, r29	; 62
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	cd bf       	out	0x3d, r28	; 61
    3530:	ed 01       	movw	r28, r26
    3532:	08 95       	ret

00003534 <_exit>:
    3534:	f8 94       	cli

00003536 <__stop_program>:
    3536:	ff cf       	rjmp	.-2      	; 0x3536 <__stop_program>
